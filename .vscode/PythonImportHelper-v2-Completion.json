[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "program_name",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_version",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "date_of_program_change",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_send_message_folder_answering_machine_message",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_folder_with_messages",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_folder_database",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_WIDTH",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "ConfigReader",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "ConfigReader",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_inviting_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_inviting_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_WIDTH",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_activity_user_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "ConfigReader",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_folder_with_messages",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_send_message_folder_answering_machine_message",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_send_message_folder_answering_machine",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_sending_messages_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_sending_messages_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_subscription_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_subscription_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_subscription_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_subscription_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_version",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "date_of_program_change",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_name",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "small_button_width",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_name",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "small_button_width",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_WIDTH",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_name",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_version",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "date_of_program_change",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "window_width",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "window_height",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "window_resizable",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_sending_messages_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_sending_messages_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_inviting_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_inviting_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_changing_accounts_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_changing_accounts_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_subscription_1",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_subscription_2",
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "isExtraImport": true,
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "isExtraImport": true,
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "flet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flet",
        "description": "flet",
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "db_handler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "GroupsAndChannels",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "MembersAdmin",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "db_handler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "isExtraImport": true,
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_files",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "working_with_accounts",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "record_and_interrupt",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "record_inviting_results",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_files",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "all_find_files",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "record_inviting_results",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "record_and_interrupt",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "record_and_interrupt",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "find_filess",
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "isExtraImport": true,
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "bio_editing_menu",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "settings_menu",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "menu_parsing",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "reactions_menu",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "subscribe_and_unsubscribe_menu",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "viewing_posts_menu",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "working_with_contacts_menu",
        "importPath": "src.gui.menu",
        "description": "src.gui.menu",
        "isExtraImport": true,
        "detail": "src.gui.menu",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "SqliteDatabase",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "BigIntegerField",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "TextField",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "fn",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "list_view",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "log_and_display",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "end_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "start_time",
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "isExtraImport": true,
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "AuthKeyUnregisteredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernamePurchaseAvailableError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameOccupiedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyDuplicatedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "PhoneNumberBannedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserDeactivatedBanError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "TimedOutError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyNotFound",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "TypeNotFoundError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyUnregisteredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "SessionPasswordNeededError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ApiIdInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "YouBlockedUserError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "PasswordHashInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyDuplicatedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "PeerFloodError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "FloodWaitError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserPrivacyRestrictedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserChannelsTooMuchError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "BotGroupsBlockedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChatWriteForbiddenError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserBannedInChannelError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserNotMutualContactError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChatAdminRequiredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserKickedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChannelPrivateError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserIdInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameNotOccupiedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "InviteRequestSentError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "TypeNotFoundError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "SessionRevokedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserDeactivatedBanError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyUnregisteredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "BadRequestError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyUnregisteredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChatAdminRequiredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChannelPrivateError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "FloodWaitError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ReactionInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChannelPrivateError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "PeerFloodError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "FloodWaitError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserBannedInChannelError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChatWriteForbiddenError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserNotMutualContactError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserIdInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameNotOccupiedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChatAdminRequiredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "SlowModeWaitError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChannelsTooMuchError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "ChannelPrivateError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UsernameInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "PeerFloodError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "FloodWaitError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "InviteRequestSentError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserDeactivatedBanError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "SessionRevokedError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "InviteHashExpiredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "InviteHashInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "AuthKeyUnregisteredError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "SessionPasswordNeededError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "UserNotParticipantError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "FilePartsInvalidError",
        "importPath": "telethon.errors",
        "description": "telethon.errors",
        "isExtraImport": true,
        "detail": "telethon.errors",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "isExtraImport": true,
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "function_button_ready",
        "importPath": "src.gui.buttons",
        "description": "src.gui.buttons",
        "isExtraImport": true,
        "detail": "src.gui.buttons",
        "documentation": {}
    },
    {
        "label": "function_button_ready_reactions",
        "importPath": "src.gui.buttons",
        "description": "src.gui.buttons",
        "isExtraImport": true,
        "detail": "src.gui.buttons",
        "documentation": {}
    },
    {
        "label": "function_button_ready_viewing",
        "importPath": "src.gui.buttons",
        "description": "src.gui.buttons",
        "isExtraImport": true,
        "detail": "src.gui.buttons",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "thefuzz",
        "description": "thefuzz",
        "isExtraImport": true,
        "detail": "thefuzz",
        "documentation": {}
    },
    {
        "label": "getting_phone_number_data_by_phone_number",
        "importPath": "src.features.auth.logging_in",
        "description": "src.features.auth.logging_in",
        "isExtraImport": true,
        "detail": "src.features.auth.logging_in",
        "documentation": {}
    },
    {
        "label": "get_country_flag",
        "importPath": "src.features.auth.logging_in",
        "description": "src.features.auth.logging_in",
        "isExtraImport": true,
        "detail": "src.features.auth.logging_in",
        "documentation": {}
    },
    {
        "label": "loging",
        "importPath": "src.features.auth.logging_in",
        "description": "src.features.auth.logging_in",
        "isExtraImport": true,
        "detail": "src.features.auth.logging_in",
        "documentation": {}
    },
    {
        "label": "checking_the_proxy_for_work",
        "importPath": "src.features.proxy.checking_proxy",
        "description": "src.features.proxy.checking_proxy",
        "isExtraImport": true,
        "detail": "src.features.proxy.checking_proxy",
        "documentation": {}
    },
    {
        "label": "reading_proxy_data_from_the_database",
        "importPath": "src.features.proxy.checking_proxy",
        "description": "src.features.proxy.checking_proxy",
        "isExtraImport": true,
        "detail": "src.features.proxy.checking_proxy",
        "documentation": {}
    },
    {
        "label": "ParsingGroupMembers",
        "importPath": "src.features.account.TGParsing",
        "description": "src.features.account.TGParsing",
        "isExtraImport": true,
        "detail": "src.features.account.TGParsing",
        "documentation": {}
    },
    {
        "label": "ParsingGroupMembers",
        "importPath": "src.features.account.TGParsing",
        "description": "src.features.account.TGParsing",
        "isExtraImport": true,
        "detail": "src.features.account.TGParsing",
        "documentation": {}
    },
    {
        "label": "Scheduler",
        "importPath": "scheduler.asyncio",
        "description": "scheduler.asyncio",
        "isExtraImport": true,
        "detail": "scheduler.asyncio",
        "documentation": {}
    },
    {
        "label": "InviteToChannelRequest",
        "importPath": "telethon.tl.functions.channels",
        "description": "telethon.tl.functions.channels",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.channels",
        "documentation": {}
    },
    {
        "label": "GetParticipantsRequest",
        "importPath": "telethon.tl.functions.channels",
        "description": "telethon.tl.functions.channels",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.channels",
        "documentation": {}
    },
    {
        "label": "JoinChannelRequest",
        "importPath": "telethon.tl.functions.channels",
        "description": "telethon.tl.functions.channels",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.channels",
        "documentation": {}
    },
    {
        "label": "JoinChannelRequest",
        "importPath": "telethon.tl.functions.channels",
        "description": "telethon.tl.functions.channels",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.channels",
        "documentation": {}
    },
    {
        "label": "LeaveChannelRequest",
        "importPath": "telethon.tl.functions.channels",
        "description": "telethon.tl.functions.channels",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.channels",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "isExtraImport": true,
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "isExtraImport": true,
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "isExtraImport": true,
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "isExtraImport": true,
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "isExtraImport": true,
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "isExtraImport": true,
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "GetDialogsRequest",
        "importPath": "telethon.tl.functions.messages",
        "description": "telethon.tl.functions.messages",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.messages",
        "documentation": {}
    },
    {
        "label": "SendReactionRequest",
        "importPath": "telethon.tl.functions.messages",
        "description": "telethon.tl.functions.messages",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.messages",
        "documentation": {}
    },
    {
        "label": "ImportChatInviteRequest",
        "importPath": "telethon.tl.functions.messages",
        "description": "telethon.tl.functions.messages",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.messages",
        "documentation": {}
    },
    {
        "label": "GetMessagesViewsRequest",
        "importPath": "telethon.tl.functions.messages",
        "description": "telethon.tl.functions.messages",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.messages",
        "documentation": {}
    },
    {
        "label": "GetFullUserRequest",
        "importPath": "telethon.tl.functions.users",
        "description": "telethon.tl.functions.users",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.users",
        "documentation": {}
    },
    {
        "label": "ChannelParticipantsAdmins",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserProfilePhoto",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "ChannelParticipantsSearch",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "InputPeerEmpty",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserStatusEmpty",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "InputUser",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserStatusLastMonth",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserStatusLastWeek",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserStatusOffline",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserStatusOnline",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "UserStatusRecently",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "phonenumbers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "carrier",
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "isExtraImport": true,
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "geocoder",
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "isExtraImport": true,
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "start_app",
        "importPath": "docs.app",
        "description": "docs.app",
        "isExtraImport": true,
        "detail": "docs.app",
        "documentation": {}
    },
    {
        "label": "CheckingProgram",
        "importPath": "src.core.checking_program",
        "description": "src.core.checking_program",
        "isExtraImport": true,
        "detail": "src.core.checking_program",
        "documentation": {}
    },
    {
        "label": "AccountBIO",
        "importPath": "src.features.account.TGAccountBIO",
        "description": "src.features.account.TGAccountBIO",
        "isExtraImport": true,
        "detail": "src.features.account.TGAccountBIO",
        "documentation": {}
    },
    {
        "label": "TGChek",
        "importPath": "src.features.account.TGChek",
        "description": "src.features.account.TGChek",
        "isExtraImport": true,
        "detail": "src.features.account.TGChek",
        "documentation": {}
    },
    {
        "label": "TGContact",
        "importPath": "src.features.account.TGContact",
        "description": "src.features.account.TGContact",
        "isExtraImport": true,
        "detail": "src.features.account.TGContact",
        "documentation": {}
    },
    {
        "label": "CreatingGroupsAndChats",
        "importPath": "src.features.account.TGCreating",
        "description": "src.features.account.TGCreating",
        "isExtraImport": true,
        "detail": "src.features.account.TGCreating",
        "documentation": {}
    },
    {
        "label": "InvitingToAGroup",
        "importPath": "src.features.account.TGInviting",
        "description": "src.features.account.TGInviting",
        "isExtraImport": true,
        "detail": "src.features.account.TGInviting",
        "documentation": {}
    },
    {
        "label": "WorkingWithReactions",
        "importPath": "src.features.account.TGReactions",
        "description": "src.features.account.TGReactions",
        "isExtraImport": true,
        "detail": "src.features.account.TGReactions",
        "documentation": {}
    },
    {
        "label": "SendTelegramMessages",
        "importPath": "src.features.account.TGSendingMessages",
        "description": "src.features.account.TGSendingMessages",
        "isExtraImport": true,
        "detail": "src.features.account.TGSendingMessages",
        "documentation": {}
    },
    {
        "label": "ViewingPosts",
        "importPath": "src.features.account.TGViewingPosts",
        "description": "src.features.account.TGViewingPosts",
        "isExtraImport": true,
        "detail": "src.features.account.TGViewingPosts",
        "documentation": {}
    },
    {
        "label": "ReceivingAndRecording",
        "importPath": "src.features.recording.receiving_and_recording",
        "description": "src.features.recording.receiving_and_recording",
        "isExtraImport": true,
        "detail": "src.features.recording.receiving_and_recording",
        "documentation": {}
    },
    {
        "label": "SettingPage",
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "isExtraImport": true,
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "get_unique_filename",
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "isExtraImport": true,
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "reaction_gui",
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "isExtraImport": true,
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "main_menu_program",
        "importPath": "src.gui.main_menu",
        "description": "src.gui.main_menu",
        "isExtraImport": true,
        "detail": "src.gui.main_menu",
        "documentation": {}
    },
    {
        "label": "run_uvicorn",
        "kind": 2,
        "importPath": "docs.app",
        "description": "docs.app",
        "peekOfCode": "def run_uvicorn():\n    \"\"\"Запуск Uvicorn в отдельном процессе.\"\"\"\n    logger.info(\"Запуск сервера FastAPI...\")\n    uvicorn.run(\"docs.app:app\", host=\"127.0.0.1\", port=8000, reload=True)\ndef start_app():\n    try:\n        server_process = Process(target=run_uvicorn)\n        server_process.start()\n        time.sleep(10)\n        # Открытие браузера после задержки, чтобы сервер успел запуститься.",
        "detail": "docs.app",
        "documentation": {}
    },
    {
        "label": "start_app",
        "kind": 2,
        "importPath": "docs.app",
        "description": "docs.app",
        "peekOfCode": "def start_app():\n    try:\n        server_process = Process(target=run_uvicorn)\n        server_process.start()\n        time.sleep(10)\n        # Открытие браузера после задержки, чтобы сервер успел запуститься.\n        webbrowser.open(\"http://127.0.0.1:8000\")\n        server_process.join()  # Ждем завершения процесса\n    except Exception as error:\n        logger.exception(error)",
        "detail": "docs.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "docs.app",
        "description": "docs.app",
        "peekOfCode": "app = FastAPI()\n# Указываем путь к статическим файлам\napp.mount(\"/static\", StaticFiles(directory=\"docs/static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"docs/templates\")  # Указываем директорию с шаблонами.\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index(request: Request):\n    \"\"\"Главная страница документации\"\"\"\n    logger.info(\"Запущена главная страница документации\")\n    try:\n        return templates.TemplateResponse(\"index.html\", {\"request\": request, \"program_name\": program_name})",
        "detail": "docs.app",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "docs.app",
        "description": "docs.app",
        "peekOfCode": "templates = Jinja2Templates(directory=\"docs/templates\")  # Указываем директорию с шаблонами.\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index(request: Request):\n    \"\"\"Главная страница документации\"\"\"\n    logger.info(\"Запущена главная страница документации\")\n    try:\n        return templates.TemplateResponse(\"index.html\", {\"request\": request, \"program_name\": program_name})\n    except Exception as error:\n        logger.exception(error)\n        return {\"error\": \"Failed to render template\"}",
        "detail": "docs.app",
        "documentation": {}
    },
    {
        "label": "CheckingProgram",
        "kind": 6,
        "importPath": "src.core.checking_program",
        "description": "src.core.checking_program",
        "peekOfCode": "class CheckingProgram:\n    \"\"\"⛔ Проверка программы от пользователя\"\"\"\n    def __init__(self):\n        self.account_extension = \"session\"  # Расширение файла аккаунта\n        self.file_extension = \"json\"\n    @staticmethod\n    async def check_before_sending_messages_via_chats(page: ft.Page):\n        \"\"\"\n        ⛔ Проверка наличия сформированного списка с чатами для рассылки по чатам.\n        ⛔ Проверка папки с сообщениями на наличие заготовленных сообщений.",
        "detail": "src.core.checking_program",
        "documentation": {}
    },
    {
        "label": "ConfigReader",
        "kind": 6,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "class ConfigReader:\n    def __init__(self):\n        self.config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n        self.config.read('user_data/config/config.ini', encoding='utf-8')\n        self.config_gui = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n        self.config_gui.read('user_data/config/config_gui.ini', encoding='utf-8')\n        self.config_path = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n        self.config_path.read('user_data/config/config_path.ini', encoding='utf-8')\n    def get_config_time_changing_accounts(self):\n        \"\"\"Получение времени смены аккаунтов\"\"\"",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_accounts_folder",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "path_accounts_folder = \"user_data/accounts\"  # Папка для аккаунтов\nclass ConfigReader:\n    def __init__(self):\n        self.config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n        self.config.read('user_data/config/config.ini', encoding='utf-8')\n        self.config_gui = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n        self.config_gui.read('user_data/config/config_gui.ini', encoding='utf-8')\n        self.config_path = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n        self.config_path.read('user_data/config/config_path.ini', encoding='utf-8')\n    def get_config_time_changing_accounts(self):",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "limits",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "limits = ConfigReader().get_limits()\ntime_activity_user_2 = ConfigReader().time_activity_user_2()\nline_width_button = ConfigReader().get_line_width_button()  # Получение ширины кнопки\nBUTTON_HEIGHT = ConfigReader().get_line_height_button()  # Получение ширины кнопки\nsmall_button_width = ConfigReader().get_small_button_width()  # Ширина малой кнопки\nBUTTON_WIDTH = ConfigReader().line_width()  # Ширина окна и ширина строки\nprogram_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "time_activity_user_2",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "time_activity_user_2 = ConfigReader().time_activity_user_2()\nline_width_button = ConfigReader().get_line_width_button()  # Получение ширины кнопки\nBUTTON_HEIGHT = ConfigReader().get_line_height_button()  # Получение ширины кнопки\nsmall_button_width = ConfigReader().get_small_button_width()  # Ширина малой кнопки\nBUTTON_WIDTH = ConfigReader().line_width()  # Ширина окна и ширина строки\nprogram_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "line_width_button",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "line_width_button = ConfigReader().get_line_width_button()  # Получение ширины кнопки\nBUTTON_HEIGHT = ConfigReader().get_line_height_button()  # Получение ширины кнопки\nsmall_button_width = ConfigReader().get_small_button_width()  # Ширина малой кнопки\nBUTTON_WIDTH = ConfigReader().line_width()  # Ширина окна и ширина строки\nprogram_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_HEIGHT",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "BUTTON_HEIGHT = ConfigReader().get_line_height_button()  # Получение ширины кнопки\nsmall_button_width = ConfigReader().get_small_button_width()  # Ширина малой кнопки\nBUTTON_WIDTH = ConfigReader().line_width()  # Ширина окна и ширина строки\nprogram_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "small_button_width",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "small_button_width = ConfigReader().get_small_button_width()  # Ширина малой кнопки\nBUTTON_WIDTH = ConfigReader().line_width()  # Ширина окна и ширина строки\nprogram_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "BUTTON_WIDTH",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "BUTTON_WIDTH = ConfigReader().line_width()  # Ширина окна и ширина строки\nprogram_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_name",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "program_name = ConfigReader().program_name()  # Имя программы\nprogram_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "program_version",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "program_version = ConfigReader().program_version()  # Версия программы\ndate_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "date_of_program_change",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "date_of_program_change = ConfigReader().date_of_program_change()  # Версия программы\nwindow_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "window_width",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "window_width = ConfigReader().window_width()  # Ширина программы\nwindow_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "window_height",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "window_height = ConfigReader().window_height()  # Ширина программы\nwindow_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов\ntime_subscription_1, time_subscription_2 = ConfigReader().get_time_subscription()",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "window_resizable",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "window_resizable = ConfigReader().window_resizable()  # Ширина программы\npath_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов\ntime_subscription_1, time_subscription_2 = ConfigReader().get_time_subscription()",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_send_message_folder_answering_machine",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "path_send_message_folder_answering_machine = ConfigReader().path_send_message_folder_answering_machine()  # Путь к папке для аккаунтов с автоответчиком\npath_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов\ntime_subscription_1, time_subscription_2 = ConfigReader().get_time_subscription()",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_send_message_folder_answering_machine_message",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "path_send_message_folder_answering_machine_message = ConfigReader().path_send_message_folder_answering_machine_message()  # Путь к папке c сообщениями для автоответчика\npath_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов\ntime_subscription_1, time_subscription_2 = ConfigReader().get_time_subscription()",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_folder_with_messages",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "path_folder_with_messages = ConfigReader().path_folder_with_messages()  # Путь к папке с сообщениями\npath_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов\ntime_subscription_1, time_subscription_2 = ConfigReader().get_time_subscription()",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "path_folder_database",
        "kind": 5,
        "importPath": "src.core.configs",
        "description": "src.core.configs",
        "peekOfCode": "path_folder_database = ConfigReader().path_folder_database()  # Путь к папке с базой данных\ntime_sending_messages_1, time_sending_messages_2 = ConfigReader().get_time_inviting()  # Время между сообщениями\ntime_inviting_1, time_inviting_2 = ConfigReader().get_time_inviting()  # Время между инвайтингом, рассылка сообщений\ntime_changing_accounts_1, time_changing_accounts_2 = ConfigReader().get_config_time_changing_accounts()  # Время смены аккаунтов\ntime_subscription_1, time_subscription_2 = ConfigReader().get_time_subscription()",
        "detail": "src.core.configs",
        "documentation": {}
    },
    {
        "label": "GroupsAndChannels",
        "kind": 6,
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "peekOfCode": "class GroupsAndChannels(Model):\n    \"\"\"\n    Список групп и каналов в таблице groups_and_channels\n    \"\"\"\n    id = IntegerField(primary_key=True)\n    title = CharField(max_length=255)\n    about = TextField(null=True)\n    link = CharField(max_length=255)\n    members_count = IntegerField(default=0)\n    parsing_time = DateTimeField(default=datetime.datetime.now)",
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "MembersAdmin",
        "kind": 6,
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "peekOfCode": "class MembersAdmin(Model):\n    \"\"\"\n    Таблица для хранения данных администраторов групп в таблице members_admin\n    \"\"\"\n    username = CharField(max_length=255, null=True)\n    user_id = BigIntegerField(unique=True)\n    access_hash = BigIntegerField(null=True)\n    first_name = CharField(max_length=255, null=True)\n    last_name = CharField(max_length=255, null=True)\n    phone = CharField(max_length=255, null=True)",
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "DatabaseHandler",
        "kind": 6,
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "peekOfCode": "class DatabaseHandler:\n    def __init__(self, db_file=path_folder_database):\n        self.db_file = db_file\n    async def connect(self) -> None:\n        \"\"\"Подключение к базе данных\"\"\"\n        self.sqlite_connection = sqlite3.connect(self.db_file)\n        self.cursor = self.sqlite_connection.cursor()\n    def close(self) -> None:\n        \"\"\"Закрытие соединения с базой данных\"\"\"\n        self.sqlite_connection.close()",
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "peekOfCode": "def remove_duplicates():\n    \"\"\"\n    Удаление дублирующихся id в таблице groups_and_channels\n    \"\"\"\n    # Находим все записи с дублирующимися id\n    duplicate_ids = (\n        GroupsAndChannels\n        .select(GroupsAndChannels.id)\n        .group_by(GroupsAndChannels.id)\n        .having(fn.COUNT(GroupsAndChannels.id) > 1)",
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "peekOfCode": "db = SqliteDatabase(path_folder_database)\nclass GroupsAndChannels(Model):\n    \"\"\"\n    Список групп и каналов в таблице groups_and_channels\n    \"\"\"\n    id = IntegerField(primary_key=True)\n    title = CharField(max_length=255)\n    about = TextField(null=True)\n    link = CharField(max_length=255)\n    members_count = IntegerField(default=0)",
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "db_handler",
        "kind": 5,
        "importPath": "src.core.sqlite_working_tools",
        "description": "src.core.sqlite_working_tools",
        "peekOfCode": "db_handler = DatabaseHandler()",
        "detail": "src.core.sqlite_working_tools",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "kind": 2,
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "peekOfCode": "def read_json_file(filename):\n    \"\"\"\n    Чтение данных из файла JSON.\n    :param filename: Полный путь к файлу JSON.\n    :return:         Данные из файла JSON в виде словаря.\n    \"\"\"\n    with open(filename, 'r', encoding=\"utf-8\") as file:\n        data = json.load(file)\n    return data\ndef all_find_files(directory_path) -> list:",
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "all_find_files",
        "kind": 2,
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "peekOfCode": "def all_find_files(directory_path) -> list:\n    \"\"\"\n    Поиск файлов в директории.\n    :param directory_path:  Путь к директории\n    :return list:           Список имен найденных файлов\n    \"\"\"\n    entities = []  # Создаем список с именами найденных файлов\n    for x in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, x)):  # Проверяем, является ли x файлом\n            entities.append(x)  # Добавляем имя файла в список",
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "working_with_accounts",
        "kind": 2,
        "importPath": "src.core.utils",
        "description": "src.core.utils",
        "peekOfCode": "def working_with_accounts(account_folder, new_account_folder) -> None:\n    \"\"\"\n    Работа с аккаунтами\n    :param account_folder: Исходный путь к файлу\n    :param new_account_folder: Путь к новой папке, куда нужно переместить файл\n    \"\"\"\n    try:  # Переносим файлы в нужную папку\n        os.replace(account_folder, new_account_folder)\n    except FileNotFoundError:  # Если в папке нет нужной папки, то создаем ее\n        try:",
        "detail": "src.core.utils",
        "documentation": {}
    },
    {
        "label": "GUIManager",
        "kind": 6,
        "importPath": "src.features.account.TGAccountBIO",
        "description": "src.features.account.TGAccountBIO",
        "peekOfCode": "class GUIManager:\n    @classmethod\n    async def create_profile_gui(cls, page: ft.Page, action, label: str) -> None:\n        \"\"\"\n        Создание графического интерфейса для изменения профиля Telegram.\n        :param page: Страница интерфейса Flet для отображения элементов управления.\n        :param action: Функция, которая выполняет специфическое действие с переданным значением.\n        :param label: Подпись для текстового поля.\n        \"\"\"\n        try:",
        "detail": "src.features.account.TGAccountBIO",
        "documentation": {}
    },
    {
        "label": "AccountBIO",
        "kind": 6,
        "importPath": "src.features.account.TGAccountBIO",
        "description": "src.features.account.TGAccountBIO",
        "peekOfCode": "class AccountBIO:\n    \"\"\"\n    Класс для управления изменениями данных аккаунта Telegram через графический интерфейс Flet.\n    \"\"\"\n    def __init__(self):\n        self.extension = 'session'\n        self.tg_connect = TGConnect()\n        self.account_actions = AccountActions(path_accounts_folder, self.extension, self.tg_connect)\n        self.gui_manager = GUIManager()\n    async def change_photo_profile_gui(self, page: ft.Page) -> None:",
        "detail": "src.features.account.TGAccountBIO",
        "documentation": {}
    },
    {
        "label": "AccountActions",
        "kind": 6,
        "importPath": "src.features.account.TGAccountBIO",
        "description": "src.features.account.TGAccountBIO",
        "peekOfCode": "class AccountActions:\n    \"\"\"\n    Класс, отвечающий за выполнение действий над аккаунтом Telegram.\n    \"\"\"\n    def __init__(self, directory_path, extension, tg_connect):\n        self.directory_path = directory_path  # путь к папке с аккаунтами Telegram\n        self.extension = extension  # расширение файла с аккаунтом Telegram (session)\n        self.tg_connect = tg_connect  # объект класса TelegramConnect (подключение к Telegram аккаунту)\n    async def change_bio_profile(self, page: ft.Page, user_input):\n        \"\"\"",
        "detail": "src.features.account.TGAccountBIO",
        "documentation": {}
    },
    {
        "label": "TGChek",
        "kind": 6,
        "importPath": "src.features.account.TGChek",
        "description": "src.features.account.TGChek",
        "peekOfCode": "class TGChek:\n    def __init__(self):\n        self.TGConnect = TGConnect()\n    async def account_verification_menu(self, page: ft.Page):\n        \"\"\"\n        Меню проверки аккаунтов\n        :param page: Страница интерфейса Flet для отображения элементов управления.\n        \"\"\"\n        async def validation_check(_) -> None:\n            \"\"\"Проверка валидности аккаунтов\"\"\"",
        "detail": "src.features.account.TGChek",
        "documentation": {}
    },
    {
        "label": "TGConnect",
        "kind": 6,
        "importPath": "src.features.account.TGConnect",
        "description": "src.features.account.TGConnect",
        "peekOfCode": "class TGConnect:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.config_reader = ConfigReader()\n        self.api_id_api_hash = self.config_reader.get_api_id_data_api_hash_data()\n        self.api_id = self.api_id_api_hash[0]\n        self.api_hash = self.api_id_api_hash[1]\n    async def verify_account(self, page: ft.Page, session_name) -> None:\n        \"\"\"\n        Проверяет и сортирует аккаунты.",
        "detail": "src.features.account.TGConnect",
        "documentation": {}
    },
    {
        "label": "TGContact",
        "kind": 6,
        "importPath": "src.features.account.TGContact",
        "description": "src.features.account.TGContact",
        "peekOfCode": "class TGContact:\n    \"\"\"\n    Работа с контактами Telegram\n    \"\"\"\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.tg_connect = TGConnect()\n    async def show_account_contact_list(self, page: ft.Page) -> None:\n        \"\"\"\n        Показать список контактов аккаунтов и запись результатов в файл",
        "detail": "src.features.account.TGContact",
        "documentation": {}
    },
    {
        "label": "CreatingGroupsAndChats",
        "kind": 6,
        "importPath": "src.features.account.TGCreating",
        "description": "src.features.account.TGCreating",
        "peekOfCode": "class CreatingGroupsAndChats:\n    \"\"\"\n    Создание групп (чатов) в автоматическом режиме\n    \"\"\"\n    def __init__(self):\n        self.tg_connect = TGConnect()\n    async def creating_groups_and_chats(self, page: ft.Page) -> None:\n        \"\"\"\n        Создание групп (чатов) в автоматическом режиме\n        :param page: Страница интерфейса Flet для отображения элементов управления.",
        "detail": "src.features.account.TGCreating",
        "documentation": {}
    },
    {
        "label": "InvitingToAGroup",
        "kind": 6,
        "importPath": "src.features.account.TGInviting",
        "description": "src.features.account.TGInviting",
        "peekOfCode": "class InvitingToAGroup:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()\n        self.tg_connect = TGConnect()\n        self.config_reader = ConfigReader()\n        self.hour, self.minutes = self.config_reader.get_hour_minutes_every_day()\n        self.scheduler = Scheduler()  # Создаем экземпляр планировщика\n    async def inviting_menu(self, page: ft.Page):\n        \"\"\"",
        "detail": "src.features.account.TGInviting",
        "documentation": {}
    },
    {
        "label": "ParsingGroupMembers",
        "kind": 6,
        "importPath": "src.features.account.TGParsing",
        "description": "src.features.account.TGParsing",
        "peekOfCode": "class ParsingGroupMembers:\n    \"\"\"Класс для парсинга групп, на которые подписан аккаунт.\"\"\"\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.tg_connect = TGConnect()\n        self.tg_subscription_manager = SubscribeUnsubscribeTelegram()\n    async def clean_parsing_list_and_remove_duplicates(self, page: ft.Page):\n        \"\"\"Очищает список парсинга от записей без имени пользователя и удаляет дубликаты по идентификатору.\"\"\"\n        # Очистка списка парсинга от записей без имени пользователя\n        await self.db_handler.remove_records_without_username(page)",
        "detail": "src.features.account.TGParsing",
        "documentation": {}
    },
    {
        "label": "WorkingWithReactions",
        "kind": 6,
        "importPath": "src.features.account.TGReactions",
        "description": "src.features.account.TGReactions",
        "peekOfCode": "class WorkingWithReactions:\n    \"\"\"\n    Класс для работы с реакциями\n    \"\"\"\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.tg_connect = TGConnect()\n        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()\n    async def send_reaction_request(self, page: ft.Page) -> None:\n        \"\"\"",
        "detail": "src.features.account.TGReactions",
        "documentation": {}
    },
    {
        "label": "SendTelegramMessages",
        "kind": 6,
        "importPath": "src.features.account.TGSendingMessages",
        "description": "src.features.account.TGSendingMessages",
        "peekOfCode": "class SendTelegramMessages:\n    \"\"\"\n    Отправка (текстовых) сообщений в личку Telegram пользователям из базы данных.\n    \"\"\"\n    def __init__(self):\n        self.tg_connect = TGConnect()\n        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()\n        self.account_extension = \"session\"  # Расширение файла аккаунта\n        self.file_extension = \"json\"\n    async def send_files_to_personal_chats(self, page: ft.Page) -> None:",
        "detail": "src.features.account.TGSendingMessages",
        "documentation": {}
    },
    {
        "label": "SubscribeUnsubscribeTelegram",
        "kind": 6,
        "importPath": "src.features.account.TGSubUnsub",
        "description": "src.features.account.TGSubUnsub",
        "peekOfCode": "class SubscribeUnsubscribeTelegram:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.tg_connect = TGConnect()\n    @staticmethod\n    async def extract_channel_id(link):\n        \"\"\"Сокращает ссылку с https://t.me/+yjqd0uZQETc4NGEy до yjqd0uZQETc4NGEy\"\"\"\n        # Проверяем, начинается ли ссылка с 'https://t.me/'\n        if link.startswith('https://t.me/'):\n            return link[len('https://t.me/'):]",
        "detail": "src.features.account.TGSubUnsub",
        "documentation": {}
    },
    {
        "label": "ViewingPosts",
        "kind": 6,
        "importPath": "src.features.account.TGViewingPosts",
        "description": "src.features.account.TGViewingPosts",
        "peekOfCode": "class ViewingPosts:\n    \"\"\"\n    Класс для накрутки просмотров постов\n    \"\"\"\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n        self.tg_connect = TGConnect()\n        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()\n    async def viewing_posts_request(self, page: ft.Page) -> None:\n        \"\"\"",
        "detail": "src.features.account.TGViewingPosts",
        "documentation": {}
    },
    {
        "label": "get_country_flag",
        "kind": 2,
        "importPath": "src.features.auth.logging_in",
        "description": "src.features.auth.logging_in",
        "peekOfCode": "def get_country_flag(ip_address):\n    \"\"\"\n    Определение страны по ip адресу на основе сервиса https://ipwhois.io/ru/documentation.\n    Возвращает флаг и название страны.\n    :param ip_address: IP адрес\n    :return: флаг и название страны\n    \"\"\"\n    try:\n        ipwhois = json.load(urlopen(f'https://ipwho.is/{ip_address}'))\n        return ipwhois['flag']['emoji'], ipwhois['country']",
        "detail": "src.features.auth.logging_in",
        "documentation": {}
    },
    {
        "label": "get_external_ip",
        "kind": 2,
        "importPath": "src.features.auth.logging_in",
        "description": "src.features.auth.logging_in",
        "peekOfCode": "def get_external_ip():\n    \"\"\"Получение внешнего ip адреса\"\"\"\n    try:\n        response = requests.get('https://httpbin.org/ip')\n        response.raise_for_status()\n        return response.json().get(\"origin\")\n    except requests.RequestException as _:\n        return None\nasync def loging(page: ft.Page):\n    \"\"\"",
        "detail": "src.features.auth.logging_in",
        "documentation": {}
    },
    {
        "label": "ReceivingAndRecording",
        "kind": 6,
        "importPath": "src.features.recording.receiving_and_recording",
        "description": "src.features.recording.receiving_and_recording",
        "peekOfCode": "class ReceivingAndRecording:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n    async def write_data_to_excel(self, file_name):\n        \"\"\"\n        Запись данных в Excel файл.\n        :param file_name: Имя файла для сохранения данных\n        \"\"\"\n        workbook = openpyxl.Workbook()  # Создание новой рабочей книги\n        sheet = workbook.active",
        "detail": "src.features.recording.receiving_and_recording",
        "documentation": {}
    },
    {
        "label": "SettingPage",
        "kind": 6,
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "peekOfCode": "class SettingPage:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n    async def creating_the_main_window_for_proxy_data_entry(self, page: ft.Page) -> None:\n        \"\"\"\n        Создание главного окна для ввода дынных proxy\n        :param page: Страница интерфейса Flet для отображения элементов управления.\n        \"\"\"\n        page.controls.append(list_view)  # добавляем ListView на страницу для отображения логов 📝\n        list_view.controls.append(ft.Text(f\"Введите данные для записи\"))  # отображаем сообщение в ListView",
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "writing_settings_to_a_file",
        "kind": 2,
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "peekOfCode": "def writing_settings_to_a_file(config) -> None:\n    \"\"\"Запись данных в файл user_data/config.ini\"\"\"\n    with open(\"user_data/config/config.ini\", \"w\") as setup:  # Открываем файл в режиме записи\n        config.write(setup)  # Записываем данные в файл\nasync def recording_limits_file(time_1, time_2, variable: str, page: ft.Page) -> configparser.ConfigParser:\n    \"\"\"\n    Запись данных в файл TelegramMaster/user_data/config.ini\n    :param time_1: Время в секундах\n    :param time_2: Время в секундах\n    :param variable: Название переменной в файле config.ini",
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "write_data_to_json_file",
        "kind": 2,
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "peekOfCode": "def write_data_to_json_file(reactions, path_to_the_file):\n    \"\"\"Открываем файл для записи данных в формате JSON\"\"\"\n    with open(path_to_the_file, 'w', encoding='utf-8') as file:\n        json.dump(reactions, file, ensure_ascii=False, indent=4)\ndef get_unique_filename(base_filename) -> str:\n    \"\"\"Функция для получения уникального имени файла\"\"\"\n    index = 1\n    while True:\n        new_filename = f\"{base_filename}_{index}.json\"\n        if not os.path.isfile(new_filename):",
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "get_unique_filename",
        "kind": 2,
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "peekOfCode": "def get_unique_filename(base_filename) -> str:\n    \"\"\"Функция для получения уникального имени файла\"\"\"\n    index = 1\n    while True:\n        new_filename = f\"{base_filename}_{index}.json\"\n        if not os.path.isfile(new_filename):\n            return new_filename\n        index += 1\nasync def reaction_gui(page: ft.Page):\n    \"\"\"",
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "peekOfCode": "config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\nconfig.read(\"user_data/config/config.ini\")\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\nclass SettingPage:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n    async def creating_the_main_window_for_proxy_data_entry(self, page: ft.Page) -> None:\n        \"\"\"\n        Создание главного окна для ввода дынных proxy\n        :param page: Страница интерфейса Flet для отображения элементов управления.",
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "src.features.settings.setting",
        "description": "src.features.settings.setting",
        "peekOfCode": "sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\nclass SettingPage:\n    def __init__(self):\n        self.db_handler = DatabaseHandler()\n    async def creating_the_main_window_for_proxy_data_entry(self, page: ft.Page) -> None:\n        \"\"\"\n        Создание главного окна для ввода дынных proxy\n        :param page: Страница интерфейса Flet для отображения элементов управления.\n        \"\"\"\n        page.controls.append(list_view)  # добавляем ListView на страницу для отображения логов 📝",
        "detail": "src.features.settings.setting",
        "documentation": {}
    },
    {
        "label": "function_button_ready",
        "kind": 2,
        "importPath": "src.gui.buttons",
        "description": "src.gui.buttons",
        "peekOfCode": "def function_button_ready(page: ft.Page, btn_click, back_button_clicked, user_input) -> None:\n    \"\"\"\n    Функция для кнопки \"Готово\" и кнопки \"Назад\"\n    :param page: Страница интерфейса Flet для отображения элементов управления.\n    :param btn_click: Кнопка \"Готово\"\n    :param user_input: Введенные данные пользователем\n    :param back_button_clicked: Кнопка \"Назад\"\n    :return:\n    \"\"\"\n    page.views.append(",
        "detail": "src.gui.buttons",
        "documentation": {}
    },
    {
        "label": "function_button_ready_reactions",
        "kind": 2,
        "importPath": "src.gui.buttons",
        "description": "src.gui.buttons",
        "peekOfCode": "def function_button_ready_reactions(page: ft.Page, btn_click, back_button_clicked, chat, message) -> None:\n    \"\"\"\n    Функция для кнопки \"Готово\" и кнопки \"Назад\"\n    :param page: Страница интерфейса Flet для отображения элементов управления.\n    :param btn_click: Кнопка \"Готово\"\n    :param chat: Введенные данные пользователем\n    :param message: Введенные данные пользователем\n    :param back_button_clicked:Кнопка \"Назад\"\n    :return:\n    \"\"\"",
        "detail": "src.gui.buttons",
        "documentation": {}
    },
    {
        "label": "function_button_ready_viewing",
        "kind": 2,
        "importPath": "src.gui.buttons",
        "description": "src.gui.buttons",
        "peekOfCode": "def function_button_ready_viewing(page: ft.Page, btn_click, back_button_clicked, link_channel, link_post):\n    \"\"\"\n    Функция для кнопки \"Готово\" и кнопки \"Назад\"\n    :param page: Страница интерфейса Flet для отображения элементов управления.\n    :param btn_click: Кнопка \"Готово\"\n    :param link_channel: Введенные данные пользователем\n    :param link_post: Введенные данные пользователем\n    :param back_button_clicked:Кнопка \"Назад\"\n    :return:\n    \"\"\"",
        "detail": "src.gui.buttons",
        "documentation": {}
    },
    {
        "label": "list_view",
        "kind": 5,
        "importPath": "src.gui.gui",
        "description": "src.gui.gui",
        "peekOfCode": "list_view = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)\nasync def start_time(page):\n    start = datetime.datetime.now()  # фиксируем и выводим время старта работы кода\n    await log_and_display('▶️ Время старта: ' + str(start), page)\n    return start\nasync def end_time(start, page):\n    finish = datetime.datetime.now()  # фиксируем и выводим время окончания работы кода\n    await log_and_display('Время окончания: ' + str(finish), page)\n    await log_and_display('Время работы: ' + str(finish - start), page)\nasync def log_and_display(message: str, page: ft.Page, level: str = \"info\"):",
        "detail": "src.gui.gui",
        "documentation": {}
    },
    {
        "label": "load_translations",
        "kind": 2,
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "peekOfCode": "def load_translations():\n    with open(\"src/locales/translations.yaml\", \"r\", encoding=\"utf-8\") as file:\n        return yaml.safe_load(file)\ntranslations = load_translations()",
        "detail": "src.locales.translations_loader",
        "documentation": {}
    },
    {
        "label": "translations",
        "kind": 5,
        "importPath": "src.locales.translations_loader",
        "description": "src.locales.translations_loader",
        "peekOfCode": "translations = load_translations()",
        "detail": "src.locales.translations_loader",
        "documentation": {}
    }
]