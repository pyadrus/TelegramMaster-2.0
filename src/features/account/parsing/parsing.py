# -*- coding: utf-8 -*-
import asyncio
import os
import os.path
import sqlite3

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import functions
from telethon.errors import (AuthKeyUnregisteredError, ChannelPrivateError, ChatAdminRequiredError, FloodWaitError,
                             UsernameInvalidError)
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import ChannelParticipantsAdmins, ChannelParticipantsSearch, InputPeerEmpty, InputUser

from src.core.configs import WIDTH_WIDE_BUTTON, path_accounts_folder, TIME_ACTIVITY_USER_2, BUTTON_HEIGHT
from src.core.sqlite_working_tools import (MembersAdmin, add_member_to_db, save_group_channel_info,
                                           administrators_entries_in_database)
from src.features.account.TGConnect import TGConnect
from src.features.account.parsing.gui_elements import GUIProgram
from src.features.account.parsing.switch_controller import ToggleController
from src.features.account.parsing.user_info import UserInfo
from src.features.account.subscribe_unsubscribe.subscribe_unsubscribe import SubscribeUnsubscribeTelegram
from src.gui.gui import end_time, list_view, log_and_display, start_time
from src.locales.translations_loader import translations


class ParsingGroupMembers:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç."""

    def __init__(self, page):
        self.page = page
        self.tg_connect = TGConnect(page)

    async def collect_user_log_data(self, user):
        return {
            "username": await UserInfo().get_username(user),
            "user_id": await UserInfo().get_user_id(user),
            "access_hash": await UserInfo().get_access_hash(user),
            "first_name": await UserInfo().get_first_name(user),
            "last_name": await UserInfo().get_last_name(user),
            "user_phone": await UserInfo().get_user_phone(user),
            "online_at": await UserInfo().get_user_online_status(user),
            "photos_id": await UserInfo().get_photo_status(user),
            "user_premium": await UserInfo().get_user_premium_status(user),
        }

    async def parse_group(self, groups_wr) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ê—Ä–≥—É–º–µ–Ω—Ç phone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        @handle_exceptions –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö user_data/software_database.db.

        :param groups_wr: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
        """
        phone = self.page.session.get("selected_sessions") or []
        logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç: {phone}")
        client = await TGConnect(self.page).get_telegram_client(phone[0], account_directory=path_accounts_folder)
        await log_and_display("üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...", self.page)
        try:
            all_participants: list = []
            while_condition = True
            my_filter = ChannelParticipantsSearch("")
            offset = 0
            while while_condition:
                try:
                    logger.warning(f"üîç –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {groups_wr}")
                    participants = await client(
                        GetParticipantsRequest(channel=groups_wr, offset=offset, filter=my_filter, limit=200, hash=0, ))
                    all_participants.extend(participants.users)
                    offset += len(participants.users)
                    if len(participants.users) < 1:
                        while_condition = False
                except TypeError:
                    await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: {groups_wr} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º.", self.page,
                                          level="error", )
                    await asyncio.sleep(2)
                    break
                except ChatAdminRequiredError:
                    await log_and_display(translations["ru"]["errors"]["admin_rights_required"], self.page)
                    await asyncio.sleep(2)
                    break
                except ChannelPrivateError:
                    await log_and_display(translations["ru"]["errors"]["channel_private"], self.page)
                    await asyncio.sleep(2)
                    break
                except AuthKeyUnregisteredError:
                    await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], self.page)
                    await asyncio.sleep(2)
                    break
                except sqlite3.DatabaseError:  # TODO –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–¥—É–º–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–µ–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
                    await log_and_display("–û—à–∏–±–∫–∞ –¥–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞", self.page)
                    await asyncio.sleep(2)
                    break

            for user in all_participants:
                await log_and_display(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user}", self.page)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user}")
                # user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                log_data = await self.collect_user_log_data(user)
                add_member_to_db(log_data)

        except TypeError as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        except Exception as error:
            logger.exception(error)

    async def account_selection_menu(self):

        async def btn_click_file_picker(e: ft.FilePickerResultEvent):
            if not e.files:
                file_text.value = "‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
                file_text.color = ft.Colors.RED
                self.page.update()
                return

            file = e.files[0]
            if not file.name.endswith(".session"):
                file_text.value = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª: {file.name}"
                file_text.color = ft.Colors.RED
                self.page.update()
                return

            # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ session-—Ñ–∞–π–ª—É
            phone = os.path.splitext(os.path.basename(file.name))[0]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "77076324730"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ session-—Ñ–∞–π–ª–∞
            self.page.session.set("selected_sessions", [phone])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–±–æ—Ä
            file_text.value = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–Ω: {phone}"
            file_text.color = ft.Colors.GREEN

            # üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            admin_switch.disabled = False
            members_switch.disabled = False
            account_groups_switch.disabled = False
            active_switch.disabled = False

            chat_input.disabled = False
            limit_active_user.disabled = False

            dropdown.disabled = False
            parse_button.disabled = False

            self.page.update()

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        file_text = ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ .session —Ñ–∞–π–ª", size=14)
        file_picker = ft.FilePicker(on_result=btn_click_file_picker)
        self.page.overlay.append(file_picker)
        pick_button = ft.ElevatedButton(text="üìÅ –í—ã–±—Ä–∞—Ç—å session —Ñ–∞–π–ª", width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                        on_click=lambda _: file_picker.pick_files(allow_multiple=False))

        # –ö–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        account_groups_switch = ft.CupertinoSwitch(label="–ì—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞", value=False, disabled=True)
        admin_switch = ft.CupertinoSwitch(label="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", value=False, disabled=True)
        members_switch = ft.CupertinoSwitch(label="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=False, disabled=True)
        # Todo –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
        active_switch = ft.CupertinoSwitch(label="–ê–∫—Ç–∏–≤–Ω—ã–µ", value=False, disabled=True)
        account_group_selection_switch = ft.CupertinoSwitch(label="–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", value=False, disabled=True)
        # Todo –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
        contacts_switch = ft.CupertinoSwitch(label="–ö–æ–Ω—Ç–∞–∫—Ç—ã", value=False, disabled=True)

        ToggleController(admin_switch, account_groups_switch, members_switch, account_group_selection_switch,
                         active_switch).element_handler(self.page)

        async def add_items(_):
            """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
            try:
                data = chat_input.value.split()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –û—Ç–ª–∞–¥–∫–∞
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                start = await start_time(self.page)
                self.page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
                try:
                    if account_groups_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç
                        await self.parsing_account_groups()
                    if admin_switch.value:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üë§
                        for groups in data:
                            await self.obtaining_administrators(groups)
                    if members_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        for groups in data:
                            await self.parse_group(groups)
                    if active_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        await self.start_active_parsing(self.page, limit_active_user)
                    if account_group_selection_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                        await self.load_groups(dropdown, result_text)  # ‚¨ÖÔ∏è –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
                        await self.start_group_parsing(dropdown, result_text)
                    await end_time(start, self.page)
                except Exception as error:
                    logger.exception(error)
            except Exception as error:
                logger.exception(error)

        chat_input = ft.TextField(label="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç...", disabled=True)
        limit_active_user = ft.TextField(label="üí¨ –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π", expand=True, disabled=True)
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
        dropdown = ft.Dropdown(width=WIDTH_WIDE_BUTTON, options=[], autofocus=True, disabled=True)
        result_text = ft.Text(value="üìÇ –ì—Ä—É–ø–ø—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        parse_button = ft.ElevatedButton(text="üîç –ü–∞—Ä—Å–∏—Ç—å", width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                         on_click=add_items, disabled=True)

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞:
        admin_switch.disabled = False
        members_switch.disabled = False
        account_groups_switch.disabled = False
        account_group_selection_switch.disabled = False
        active_switch.disabled = False
        chat_input.disabled = False
        limit_active_user.disabled = False
        dropdown.disabled = False
        parse_button.disabled = False

        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        admin_switch.expand = True
        members_switch.expand = True
        account_groups_switch.expand = True

        account_group_selection_switch.expand = True
        active_switch.expand = True
        contacts_switch.expand = True
        self.page.update()

        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (View)
        view = ft.View(
            route="/parsing",
            controls=[
                await GUIProgram().key_app_bar(),
                await GUIProgram().outputs_text_gradient(),
                list_view,
                ft.Column([
                    file_text,
                    pick_button,
                    ft.Row([admin_switch, members_switch, account_groups_switch, ]),
                    ft.Row([account_group_selection_switch, active_switch, contacts_switch, ]),
                    chat_input,
                    await GUIProgram().diver_castom(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    ft.Row([limit_active_user]),
                    await GUIProgram().diver_castom(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    result_text,
                    dropdown,
                    parse_button,  # ‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                ])
            ]
        )
        self.page.views.append(view)
        self.page.update()

    async def start_group_parsing(self, dropdown, result_text):
        phone = await self.load_groups(dropdown, result_text)
        logger.warning(f"üîç –ê–∫–∫–∞—É–Ω—Ç: {phone}")
        client = await self.tg_connect.get_telegram_client(phone, path_accounts_folder)
        if not dropdown.value:
            await log_and_display("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", self.page)
            return
        await log_and_display(f"‚ñ∂Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {dropdown.value}", self.page)
        logger.warning(f"üîç –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—É: {dropdown.value}")
        await self.parse_group(dropdown.value)
        await client.disconnect()
        await log_and_display("üîö –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", self.page)

    async def start_active_parsing(self, chat_input_active, limit_active_user):
        selected = self.page.session.get("selected_sessions") or []
        if not selected:
            await log_and_display("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", self.page)
            return

        phone = self.page.session.get("selected_sessions") or []
        logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç: {phone}")
        chat = chat_input_active.value
        try:
            limit = int(limit_active_user.value)
        except ValueError:
            await log_and_display("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π", self.page)
            return

        await log_and_display(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º —á–∞—Ç: {chat} –Ω–∞ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π", self.page)
        await self.parse_active_users(chat, limit, phone[0])

    async def load_groups(self, dropdown, result_text):
        try:
            selected = self.page.session.get("selected_sessions") or []
            if not selected:
                await log_and_display("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", self.page)
                return

            session_path = selected[0]
            phone = os.path.splitext(os.path.basename(session_path))[0]
            logger.warning(f"üîç –†–∞–±–æ—Ç–∞–µ–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {phone}")
            client = await self.tg_connect.get_telegram_client(phone, path_accounts_folder)
            result = await client(
                GetDialogsRequest(offset_date=None, offset_id=0, offset_peer=InputPeerEmpty(), limit=200, hash=0))
            groups = await self.filtering_groups(result.chats)
            titles = await self.name_of_the_groups(groups)
            dropdown.options = [ft.dropdown.Option(t) for t in titles]
            result_text.value = f"üîΩ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(titles)}"
            self.page.update()
            return phone
        except Exception as e:
            logger.exception(e)
            return None

    async def obtaining_administrators(self, groups):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –≥—Ä—É–ø–ø—ã, –≤–∫–ª—é—á–∞—è –∏—Ö –±–∏–æ–≥—Ä–∞—Ñ–∏—é, —Å—Ç–∞—Ç—É—Å, —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.
        """
        try:
            phone = self.page.session.get("selected_sessions") or []
            logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç: {phone}")
            try:
                client = await self.tg_connect.get_telegram_client(phone[0],
                                                                   account_directory=path_accounts_folder)
                await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups}", self.page)
                try:
                    entity = await client.get_entity(groups)  # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
                    if hasattr(entity, "megagroup") and entity.megagroup:
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                        async for user in client.iter_participants(entity, filter=ChannelParticipantsAdmins):
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            admin_name = (user.first_name or "").strip()
                            if user.last_name:
                                admin_name += f" {user.last_name}"

                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            log_data = {
                                "username": await UserInfo().get_username(user),
                                "user_id": await UserInfo().get_user_id(user),
                                "access_hash": await UserInfo().get_access_hash(user),
                                "first_name": await UserInfo().get_first_name(user),
                                "last_name": await UserInfo().get_last_name(user),
                                "phone": await UserInfo().get_user_phone(user),
                                "online_at": await UserInfo().get_user_online_status(user),
                                "photo_status": await UserInfo().get_photo_status(user),
                                "premium_status": await UserInfo().get_user_premium_status(user),
                                "user_status": "Admin",
                                "bio": await UserInfo().get_bio_user(await UserInfo().get_full_user_info(user, client)),
                                "group": groups,
                            }
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
                            await asyncio.sleep(0.5)
                            await log_and_display(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {log_data}", self.page)

                            existing_user = MembersAdmin.select().where(
                                MembersAdmin.user_id == log_data["user_id"]).first()
                            if not existing_user:
                                administrators_entries_in_database(log_data)
                            else:
                                await log_and_display(
                                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {log_data['user_id']} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ü—Ä–æ–ø—É—â–µ–Ω.",
                                    self.page)
                    else:
                        try:
                            await log_and_display(f"–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –∞ –∫–∞–Ω–∞–ª: {entity.title}", self.page)
                            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                        except AttributeError:
                            await log_and_display(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã {groups[0]}", self.page)
                except UsernameInvalidError:
                    await log_and_display(translations["ru"]["errors"]["group_entity_error"], self.page)
                except ValueError:
                    await log_and_display(translations["ru"]["errors"]["group_entity_error"], self.page)
                await client.disconnect()
            except FloodWaitError as e:
                await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", self.page, level="error", )
                await client.disconnect()
        except Exception as error:
            logger.exception(error)

    async def parsing_account_groups(self):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ üìÇ
        phone = self.page.session.get("selected_sessions") or []
        logger.debug(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç: {phone}")
        client = await self.tg_connect.get_telegram_client(phone[0], account_directory=path_accounts_folder)
        await log_and_display(
            f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {phone}\n üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç", self.page)
        await self.forming_a_list_of_groups(client)

    async def parse_active_users(self, chat_input, limit_active_user, phone_number) -> None:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ.
        """
        try:
            client = await self.tg_connect.get_telegram_client(phone_number,
                                                               account_directory=path_accounts_folder)
            await SubscribeUnsubscribeTelegram(self.page).subscribe_to_group_or_channel(client, chat_input)
            try:
                await asyncio.sleep(int(TIME_ACTIVITY_USER_2 or 5))
            except TypeError:
                await asyncio.sleep(5)
            # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Telegram API –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å
            await self.get_active_users(client, chat_input, limit_active_user)
        except Exception as error:
            logger.exception(error)

    async def get_active_users(self, client, chat, limit_active_user) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param chat: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            entity = await client.get_entity(chat)
            async for message in client.iter_messages(entity, limit=limit_active_user):
                from_id = getattr(message, 'from_id', None)
                if from_id:
                    user = await client.get_entity(from_id)
                    try:
                        await log_and_display(f"{message.from_id}", self.page)
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        from_user = InputUser(user_id=await UserInfo().get_user_id(user),
                                              access_hash=await UserInfo().get_access_hash(user))  # –°–æ–∑–¥–∞–µ–º InputUser
                        await log_and_display(f"{from_user}", self.page)
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        log_data = await self.collect_user_log_data(user)
                        await log_and_display(f"{log_data}", self.page)
                        await add_member_to_db(log_data)
                    except ValueError as e:
                        await log_and_display(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_id.user_id}: {e}", self.page, )
                else:
                    await log_and_display(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ from_id.", self.page, )
        except Exception as error:
            logger.exception(error)

    @staticmethod
    async def filtering_groups(chats):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø.

        :param chats: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.
        :return: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        """
        groups = []
        for chat in chats:
            try:
                if chat.megagroup:
                    groups.append(chat)
            except AttributeError:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ megagroup
        return groups

    @staticmethod
    async def name_of_the_groups(groups):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.

        :param groups: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        :return: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.
        """
        group_names = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
        for group in groups:
            group_names.append(group.title)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫
        return group_names

    async def forming_a_list_of_groups(self, client) -> None:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.

        –ú–µ—Ç–æ–¥ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö, –≤–∫–ª—é—á–∞—è –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        :param client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telegram.
        """
        try:
            async for dialog in client.iter_dialogs():
                try:
                    entity = await client.get_entity(dialog.id)
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
                    from telethon.tl.types import Chat, Channel
                    if isinstance(entity, Chat):
                        logger.debug(f"üí¨ –ü—Ä–æ–ø—É—â–µ–Ω –ª–∏—á–Ω—ã–π —á–∞—Ç: {dialog.id}")
                        continue
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º
                    if not getattr(entity, 'megagroup', False) and not getattr(entity, 'broadcast', False):
                        continue
                    full_channel_info = await client(functions.channels.GetFullChannelRequest(channel=entity))
                    chat = full_channel_info.full_chat
                    if not hasattr(chat, 'participants_count'):
                        logger.warning(f"‚ö†Ô∏è participants_count –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {dialog.id}")
                        continue
                    participants_count = chat.participants_count
                    username = getattr(entity, 'username', None)
                    link = f"https://t.me/{username}" if username else None
                    title = entity.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    about = getattr(chat, 'about', '')
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    await log_and_display(f"{dialog.id}, {title}, {link or '–±–µ–∑ —Å—Å—ã–ª–∫–∏'}, {participants_count}",
                                          self.page, )
                    await save_group_channel_info(dialog, title, about, link, participants_count)
                except TypeError as te:
                    logger.warning(f"‚ùå TypeError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞ {dialog.id}: {te}")
                    continue
                except Exception as e:
                    logger.exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞ {dialog.id}: {e}")
                    continue
        except Exception as error:
            logger.exception(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ forming_a_list_of_groups: {error}")

# 690
