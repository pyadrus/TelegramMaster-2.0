# -*- coding: utf-8 -*-
import asyncio
import os
import os.path
import sqlite3
import time

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import functions
from telethon.errors import (AuthKeyUnregisteredError, ChannelPrivateError, ChatAdminRequiredError, FloodWaitError,
                             UsernameInvalidError)
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import (ChannelParticipantsAdmins, ChannelParticipantsSearch, InputPeerEmpty, InputUser)

from src.core.configs import (line_width_button, path_accounts_folder, time_activity_user_2, BUTTON_HEIGHT)
from src.core.sqlite_working_tools import (GroupsAndChannels, MembersAdmin, MembersGroups, db, remove_duplicates)
from src.features.account.TGConnect import TGConnect
from src.features.account.TGSubUnsub import SubscribeUnsubscribeTelegram
from src.features.account.parsing.gui_elements import GUIProgram
from src.features.account.parsing.switch_controller import ToggleController
from src.features.account.parsing.user_info import UserInfo
from src.gui.gui import end_time, list_view, log_and_display, start_time
from src.locales.translations_loader import translations


async def collect_user_log_data(user):
    return {
        "username": await UserInfo().get_username(user),
        "user_id": await UserInfo().get_user_id(user),
        "access_hash": await UserInfo().get_access_hash(user),
        "first_name": await UserInfo().get_first_name(user),
        "last_name": await UserInfo().get_last_name(user),
        "user_phone": await UserInfo().get_user_phone(user),
        "online_at": await UserInfo().get_user_online_status(user),
        "photos_id": await UserInfo().get_photo_status(user),
        "user_premium": await UserInfo().get_user_premium_status(user),
    }


async def parse_group(client, groups_wr, page) -> None:
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ê—Ä–≥—É–º–µ–Ω—Ç phone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
    @handle_exceptions –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö user_data/software_database.db.

    :param client: –ö–ª–∏–µ–Ω—Ç Telegram
    :param groups_wr: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    await client.connect()
    await log_and_display("üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...", page)
    try:
        all_participants: list = []
        while_condition = True
        my_filter = ChannelParticipantsSearch("")
        offset = 0
        while while_condition:
            try:
                logger.warning(f"üîç –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {groups_wr}")
                participants = await client(
                    GetParticipantsRequest(channel=groups_wr, offset=offset, filter=my_filter,
                                           limit=200, hash=0, ))

                all_participants.extend(participants.users)
                offset += len(participants.users)
                if len(participants.users) < 1:
                    while_condition = False
            except TypeError:
                await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: {groups_wr} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º.", page,
                                      level="error", )
                await asyncio.sleep(2)
                break
            except ChatAdminRequiredError:
                await log_and_display(translations["ru"]["errors"]["admin_rights_required"], page)
                await asyncio.sleep(2)
                break
            except ChannelPrivateError:
                await log_and_display(translations["ru"]["errors"]["channel_private"], page)
                await asyncio.sleep(2)
                break
            except AuthKeyUnregisteredError:
                await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], page)
                await asyncio.sleep(2)
                break

        for user in all_participants:
            await log_and_display(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user}", page)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user}")
            # user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            log_data = await collect_user_log_data(user)
            with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                MembersGroups.get_or_create(
                    user_id=log_data["user_id"],
                    defaults={
                        "username": log_data["username"],
                        "access_hash": log_data["access_hash"],
                        "first_name": log_data["first_name"],
                        "last_name": log_data["last_name"],
                        "user_phone": log_data["user_phone"],
                        "online_at": log_data["online_at"],
                        "photos_id": log_data["photos_id"],
                        "user_premium": log_data["user_premium"],
                    },
                )
    except TypeError as error:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    except Exception as error:
        logger.exception(error)
        logger.exception(error)


class ParsingGroupMembers:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç."""

    def __init__(self):
        self.tg_connect = TGConnect()
        self.tg_subscription_manager = SubscribeUnsubscribeTelegram()

    async def account_selection_menu(self, page):

        async def btn_click_file_picker(e: ft.FilePickerResultEvent):
            if not e.files:
                file_text.value = "‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
                file_text.color = ft.Colors.RED
                page.update()
                return

            file = e.files[0]
            if not file.name.endswith(".session"):
                file_text.value = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª: {file.name}"
                file_text.color = ft.Colors.RED
                page.update()
                return

            # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ session-—Ñ–∞–π–ª—É
            phone = os.path.splitext(os.path.basename(file.name))[0]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "77076324730"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ session-—Ñ–∞–π–ª–∞
            page.session.set("selected_sessions", [phone])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–±–æ—Ä
            file_text.value = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–Ω: {phone}"
            file_text.color = ft.Colors.GREEN

            # üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            admin_switch.disabled = False
            members_switch.disabled = False
            account_groups_switch.disabled = False

            chat_input.disabled = False
            chat_input_active.disabled = False
            limit_active_user.disabled = False

            dropdown.disabled = False
            # btn_active_parse.disabled = False
            # btn_group_parse.disabled = False
            parse_button.disabled = False

            page.update()

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        file_text = ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ .session —Ñ–∞–π–ª", size=14)
        file_picker = ft.FilePicker(on_result=btn_click_file_picker)
        page.overlay.append(file_picker)
        pick_button = ft.ElevatedButton(text="üìÅ –í—ã–±—Ä–∞—Ç—å session —Ñ–∞–π–ª", width=line_width_button, height=BUTTON_HEIGHT,
                                        on_click=lambda _: file_picker.pick_files(allow_multiple=False))

        # –ö–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        admin_switch = ft.CupertinoSwitch(label="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", value=False, disabled=True)
        members_switch = ft.CupertinoSwitch(label="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=False, disabled=True)
        account_groups_switch = ft.CupertinoSwitch(label="–ì—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞", value=False, disabled=True)
        account_group_selection_switch = ft.CupertinoSwitch(label="–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", value=False, disabled=True)
        # Todo –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
        active_switch = ft.CupertinoSwitch(label="–ê–∫—Ç–∏–≤–Ω—ã–µ", value=False, disabled=True)
        # Todo –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
        contacts_switch = ft.CupertinoSwitch(label="–ö–æ–Ω—Ç–∞–∫—Ç—ã", value=False, disabled=True)

        ToggleController(admin_switch, account_groups_switch, members_switch,
                         account_group_selection_switch).element_handler(page)

        async def add_items(_):
            """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
            try:
                data = chat_input.value.split()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –û—Ç–ª–∞–¥–∫–∞

                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                # await write_to_single_column_table_peewee(data)

                start = await start_time(page)
                page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
                try:
                    if account_groups_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç
                        await self.parsing_account_groups(page)
                    if admin_switch.value:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üë§
                        for groups in data:
                            await self.obtaining_administrators(groups, page)
                    if members_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        phone = page.session.get("selected_sessions") or []
                        logger.warning(f"–ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {phone[0]}")
                        for groups in data:
                            await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups}", page)
                            # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É
                            client = await self.tg_connect.get_telegram_client(page, phone[0],
                                                                               account_directory=path_accounts_folder)
                            group = await client.get_entity(groups)
                            await self.tg_subscription_manager.subscribe_to_group_or_channel(client, groups, page)
                            offset = 0
                            limit = 100
                            all_participants = []

                            while True:
                                try:
                                    participants = await client(GetParticipantsRequest(
                                        channel=group,
                                        filter=ChannelParticipantsSearch(''),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
                                        offset=offset,
                                        limit=limit,
                                        hash=0
                                    ))
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                                    break

                                if not participants.users:
                                    break

                                all_participants.extend(participants.users)
                                offset += len(participants.users)

                                print(f"–°–ø–∞—Ä—Å–∏–ª–∏ {len(all_participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

                            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            for user in all_participants:
                                print(f"{user.id} | @{user.username} | {user.first_name} {user.last_name}")

                            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üîå
                            try:
                                await client.disconnect()
                            except sqlite3.DatabaseError:
                                await log_and_display(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone[0]}, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                    page, )
                                await log_and_display(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {phone[0]}", page)

                    if active_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        await self.start_active_parsing(page, chat_input_active, limit_active_user)
                    if account_group_selection_switch.value:  # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                        await self.load_groups(page, dropdown, result_text)  # ‚¨ÖÔ∏è –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
                        await self.start_group_parsing(page, dropdown, result_text)

                    await end_time(start, page)
                except Exception as error:
                    logger.exception(error)
            except Exception as error:
                logger.exception(error)

        chat_input = ft.TextField(label="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç...", disabled=True)
        chat_input_active = ft.TextField(label="üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö", expand=True, disabled=True)
        limit_active_user = ft.TextField(label="üí¨ –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π", expand=True, disabled=True)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
        dropdown = ft.Dropdown(width=line_width_button, options=[], autofocus=True, disabled=True)
        result_text = ft.Text(value="üìÇ –ì—Ä—É–ø–ø—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        parse_button = ft.ElevatedButton(text="üîç –ü–∞—Ä—Å–∏—Ç—å", width=line_width_button, height=BUTTON_HEIGHT,
                                         on_click=add_items, disabled=True)

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞:
        admin_switch.disabled = False
        members_switch.disabled = False
        account_groups_switch.disabled = False
        account_group_selection_switch.disabled = False
        chat_input.disabled = False
        chat_input_active.disabled = False
        limit_active_user.disabled = False
        dropdown.disabled = False
        parse_button.disabled = False

        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        admin_switch.expand = True
        members_switch.expand = True
        account_groups_switch.expand = True

        account_group_selection_switch.expand = True
        active_switch.expand = True
        contacts_switch.expand = True
        page.update()

        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (View)
        view = ft.View(
            route="/parsing",
            controls=[
                await GUIProgram().key_app_bar(),
                await GUIProgram().outputs_text_gradient(),
                list_view,
                ft.Column([
                    file_text,
                    pick_button,
                    ft.Row([admin_switch, members_switch, account_groups_switch, ]),
                    ft.Row([account_group_selection_switch, active_switch, contacts_switch, ]),
                    chat_input,
                    ft.Divider(),
                    ft.Row([chat_input_active, limit_active_user]),
                    ft.Divider(),
                    result_text,
                    dropdown,
                    parse_button,  # ‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                ])
            ]
        )
        page.views.append(view)
        page.update()

    async def start_group_parsing(self, page, dropdown, result_text):
        phone = await self.load_groups(page, dropdown, result_text)
        logger.warning(f"üîç –ê–∫–∫–∞—É–Ω—Ç: {phone}")
        client = await self.tg_connect.get_telegram_client(page, phone, path_accounts_folder)
        if not dropdown.value:
            await log_and_display("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", page)
            return
        await log_and_display(f"‚ñ∂Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {dropdown.value}", page)
        logger.warning(f"üîç –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—É: {dropdown.value}")
        await parse_group(client, dropdown.value, page)
        await client.disconnect()
        await log_and_display("üîö –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", page)

    async def start_active_parsing(self, page, chat_input_active, limit_active_user):
        selected = page.session.get("selected_sessions") or []
        if not selected:
            await log_and_display("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", page)
            return

        phone = os.path.splitext(os.path.basename(selected[0]))[0]
        chat = chat_input_active.value
        try:
            limit = int(limit_active_user.value)
        except ValueError:
            await log_and_display("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π", page)
            return

        await log_and_display(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º —á–∞—Ç: {chat} –Ω–∞ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π", page)
        await self.parse_active_users(chat, limit, page, phone)

    async def load_groups(self, page, dropdown, result_text):
        try:
            selected = page.session.get("selected_sessions") or []
            if not selected:
                await log_and_display("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", page)
                return

            session_path = selected[0]
            phone = os.path.splitext(os.path.basename(session_path))[0]
            logger.warning(f"üîç –†–∞–±–æ—Ç–∞–µ–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {phone}")
            client = await self.tg_connect.get_telegram_client(page, phone, path_accounts_folder)
            result = await client(
                GetDialogsRequest(offset_date=None, offset_id=0, offset_peer=InputPeerEmpty(), limit=200, hash=0))
            groups = await self.filtering_groups(result.chats)
            titles = await self.name_of_the_groups(groups)
            dropdown.options = [ft.dropdown.Option(t) for t in titles]
            result_text.value = f"üîΩ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(titles)}"
            page.update()
            return phone
        except Exception as e:
            logger.exception(e)
            return None

    async def obtaining_administrators(self, groups, page: ft.Page):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –≥—Ä—É–ø–ø—ã, –≤–∫–ª—é—á–∞—è –∏—Ö –±–∏–æ–≥—Ä–∞—Ñ–∏—é, —Å—Ç–∞—Ç—É—Å, —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.
        """
        try:
            phone = page.session.get("selected_sessions") or []
            logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç: {phone}")
            try:
                client = await self.tg_connect.get_telegram_client(page, phone[0], account_directory=path_accounts_folder)
                # for groups in await self.db_handler.open_and_read_data(table_name="writing_group_links", page=page):
                await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups}", page)
                try:
                    entity = await client.get_entity(groups)  # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
                    if hasattr(entity, "megagroup") and entity.megagroup:
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                        async for user in client.iter_participants(entity, filter=ChannelParticipantsAdmins):
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            admin_name = (user.first_name or "").strip()
                            if user.last_name:
                                admin_name += f" {user.last_name}"

                            full_user = await client(GetFullUserRequest(id=await UserInfo().get_user_id(user)))
                            bio = full_user.full_user.about or ""

                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            log_data = {
                                "username": await UserInfo().get_username(user),
                                "user_id": await UserInfo().get_user_id(user),
                                "access_hash": await UserInfo().get_access_hash(user),
                                "first_name": await UserInfo().get_first_name(user),
                                "last_name": await UserInfo().get_last_name(user),
                                "phone": await UserInfo().get_user_phone(user),
                                "online_at": await UserInfo().get_user_online_status(user),
                                "photo_status": await UserInfo().get_photo_status(user),
                                "premium_status": await UserInfo().get_user_premium_status(user),
                                "user_status": "Admin",
                                "bio": bio,
                                "group": groups[0],
                            }
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
                            await asyncio.sleep(0.5)
                            await log_and_display(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {log_data}", page)
                            with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                                MembersAdmin.create(
                                    username=log_data["username"],
                                    user_id=log_data["user_id"],
                                    access_hash=log_data["access_hash"],
                                    first_name=log_data["first_name"],
                                    last_name=log_data["last_name"],
                                    phone=log_data["phone"],
                                    online_at=log_data["online_at"],
                                    photo_status=log_data["photo_status"],
                                    premium_status=log_data["premium_status"],
                                    user_status=log_data["user_status"],
                                    bio=log_data["bio"],
                                    group_name=log_data["group"],
                                )
                    else:
                        try:
                            await log_and_display(f"–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –∞ –∫–∞–Ω–∞–ª: {entity.title}", page)
                            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                        except AttributeError:
                            await log_and_display(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã {groups[0]}",
                                                  page, )
                except UsernameInvalidError:
                    await log_and_display(translations["ru"]["errors"]["group_entity_error"], page)
                except ValueError:
                    await log_and_display(translations["ru"]["errors"]["group_entity_error"], page)
                await client.disconnect()
            except FloodWaitError as e:
                await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", page, level="error", )
                await client.disconnect()
        except Exception as error:
            logger.exception(error)

    async def parsing_account_groups(self, page):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ üìÇ
        phone = page.session.get("selected_sessions") or []
        logger.debug(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç: {phone}")
        client = await self.tg_connect.get_telegram_client(page, phone, account_directory=path_accounts_folder)
        await log_and_display(
            f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {phone}\n üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç", page)
        await self.forming_a_list_of_groups(client, page)
        remove_duplicates()  # –ß–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üßπ (—Ç–∞–±–ª–∏—Ü–∞ groups_and_channels, –∫–æ–ª–æ–Ω–∫–∞ id)

    async def parse_active_users(self, chat_input, limit_active_user, page, phone_number) -> None:
        """
        Parsing —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤ —á–∞—Ç (–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

        :param chat_input: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            client = await self.tg_connect.get_telegram_client(page, phone_number,
                                                               account_directory=path_accounts_folder)
            await self.tg_subscription_manager.subscribe_to_group_or_channel(client, chat_input, page)
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ time_activity_user_2 –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–µ—Å–ª–∏ –æ–Ω–æ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
                await asyncio.sleep(int(time_activity_user_2 or 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –µ—Å–ª–∏ None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
            except TypeError:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, time_activity_user_2 –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø),
                # —Ç–æ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 5 —Å–µ–∫—É–Ω–¥.
                await asyncio.sleep(5)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –µ—Å–ª–∏ None –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            await self.get_active_users(client, chat_input, limit_active_user, page)
            await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
        except Exception as error:
            logger.exception(error)

    async def get_active_users(self, client, chat, limit_active_user, page) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param chat: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            async for message in client.iter_messages(chat, limit=int(limit_active_user)):
                if message.from_id is not None:
                    try:
                        await log_and_display(f"{message.from_id}", page)
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = await client.get_entity(message.from_id.user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
                        from_user = InputUser(user_id=await UserInfo().get_user_id(user),
                                              access_hash=await UserInfo().get_access_hash(user))  # –°–æ–∑–¥–∞–µ–º InputUser
                        await log_and_display(f"{from_user}", page)
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        log_data = await collect_user_log_data(user)
                        await log_and_display(f"{log_data}", page)
                        with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                            MembersGroups.get_or_create(
                                user_id=log_data["user_id"],
                                defaults={
                                    "username": log_data["username"],
                                    "access_hash": log_data["access_hash"],
                                    "first_name": log_data["first_name"],
                                    "last_name": log_data["last_name"],
                                    "user_phone": log_data["user_phone"],
                                    "online_at": log_data["online_at"],
                                    "photos_id": log_data["photos_id"],
                                    "user_premium": log_data["user_premium"],
                                },
                            )
                    except ValueError as e:
                        await log_and_display(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_id.user_id}: {e}", page, )
                else:
                    await log_and_display(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ from_id.", page, )
        except Exception as error:
            logger.exception(error)

    @staticmethod
    async def filtering_groups(chats):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø.

        :param chats: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.
        :return: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        """
        groups = []
        for chat in chats:
            try:
                if chat.megagroup:
                    groups.append(chat)
            except AttributeError:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ megagroup
        return groups

    @staticmethod
    async def name_of_the_groups(groups):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.

        :param groups: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        :return: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.
        """
        group_names = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
        for group in groups:
            group_names.append(group.title)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫
        return group_names

    @staticmethod
    async def forming_a_list_of_groups(client, page: ft.Page) -> None:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤.

        –ú–µ—Ç–æ–¥ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö, –≤–∫–ª—é—á–∞—è –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        :param client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telegram.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            async for dialog in client.iter_dialogs():
                try:
                    entity = await client.get_entity(dialog.id)
                    full_channel_info = await client(functions.channels.GetFullChannelRequest(channel=entity))
                    channel_details = await client.get_entity(full_channel_info.full_chat)
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants_count = getattr(full_channel_info.full_chat, "participants_count", 0)
                    # –í—Ä–µ–º—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    await log_and_display(
                        f"{dialog.id}, {channel_details.title}, https://t.me/{channel_details.username}, {participants_count}",
                        page, )
                    with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                        GroupsAndChannels.create(
                            id=dialog.id,
                            title=channel_details.title,
                            about=full_channel_info.full_chat.about,
                            link=f"https://t.me/{channel_details.username}",
                            members_count=participants_count,
                            parsing_time=time.strftime(
                                "%Y-%m-%d %H:%M:%S", time.localtime()
                            ),
                        )
                except TypeError:
                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        except Exception as error:
            logger.exception(error)

    # @staticmethod
    # async def parse_users(client, target_group, page: ft.Page):
    #     """
    #     üßë‚Äçü§ù‚Äçüßë –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞.
    #     –ú–µ—Ç–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ, —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª–µ.
    #
    #     :param client: –ö–ª–∏–µ–Ω—Ç Telegram.
    #     :param target_group: –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã.
    #     :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    #     :return: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     """
    #     try:
    #         await log_and_display("üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...", page)
    #
    #         all_participants: list = []
    #         while_condition = True
    #         my_filter = ChannelParticipantsSearch("")
    #         offset = 0
    #         while while_condition:
    #             try:
    #                 participants = await client(
    #                     GetParticipantsRequest(channel=target_group, offset=offset, filter=my_filter, limit=200,
    #                                            hash=0))
    #                 all_participants.extend(participants.users)
    #                 offset += len(participants.users)
    #                 if len(participants.users) < 1:
    #                     while_condition = False
    #             except TypeError:
    #                 await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: {target_group} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º.", page,
    #                                       level="error")
    #                 await asyncio.sleep(2)
    #                 break
    #             except ChatAdminRequiredError:
    #                 await log_and_display(translations["ru"]["errors"]["admin_rights_required"], page)
    #                 await asyncio.sleep(2)
    #                 break
    #             except ChannelPrivateError:
    #                 await log_and_display(translations["ru"]["errors"]["channel_private"], page)
    #                 await asyncio.sleep(2)
    #                 break
    #             except AuthKeyUnregisteredError:
    #                 await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], page)
    #                 await asyncio.sleep(2)
    #                 break
    #
    #         return all_participants
    #     except Exception as error:
    #         logger.exception(error)
    #         raise

    # async def get_all_participants(self, all_participants, page: ft.Page) -> list:
    #     """
    #     –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     –ú–µ—Ç–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π.
    #
    #     :param all_participants: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    #     :return: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     """
    #     try:
    #         entities: list = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    #         for user in all_participants:
    #             await self.get_user_data(user, entities, page)
    #         return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    #     except TypeError as error:
    #         logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    #         return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    #     except Exception as error:
    #         logger.exception(error)
    #         return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    # async def get_active_user_data(self, user):
    #     """
    #     –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #
    #     :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    #     """
    #     try:
    #         entity = (
    #             await self.get_last_name(user), await self.get_user_phone(user),
    #             await self.get_user_online_status(user), await self.get_photo_status(user),
    #             await self.get_user_premium_status(user))
    #         return entity
    #     except Exception as error:
    #         logger.exception(error)
    #         raise

# 690
