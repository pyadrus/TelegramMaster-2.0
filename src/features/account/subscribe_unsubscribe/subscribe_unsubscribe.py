# -*- coding: utf-8 -*-
import asyncio
import sqlite3

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import functions, types
from telethon.errors import (ChannelPrivateError, SessionRevokedError, InviteRequestSentError,
                             FloodWaitError, AuthKeyUnregisteredError, ChannelsTooMuchError)
from telethon.errors import (InviteHashExpiredError, InviteHashInvalidError,
                             SessionPasswordNeededError, UserNotParticipantError)
from telethon.sessions import StringSession
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest

from src.core.configs import (BUTTON_HEIGHT, WIDTH_WIDE_BUTTON, path_accounts_folder)
from src.core.configs import (time_subscription_1,
                              time_subscription_2)
from src.core.sqlite_working_tools import write_writing_group_links_to_db, get_writing_group_links
from src.core.utils import find_filess
from src.features.account.TGConnect import TGConnect
from src.features.account.connect.connect import get_string_session, getting_account_data
from src.features.account.parsing.gui_elements import GUIProgram
from src.features.account.subscribe_unsubscribe.subscribe_unsubscribe_gui import (SubscriptionLinkInputSection,
                                                                                  TimeIntervalInputSection)
from src.features.settings.setting import writing_settings_to_a_file, recording_limits_file
from src.gui.gui import end_time, list_view, log_and_display, start_time
from src.gui.notification import show_notification
from src.locales.translations_loader import translations


class SubscribeUnsubscribeTelegram:

    def __init__(self, page):
        self.page = page  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        self.tg_connect = TGConnect(page=page)

    async def subscribe_and_unsubscribe_menu(self):
        """
        –ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø–∏—Å–∫–∞
        """

        self.page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        self.page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

        async def unsubscribe_all(_) -> None:
            """
            –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≥—Ä—É–ø–ø, –∫–∞–Ω–∞–ª–æ–≤, –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            """
            start = await start_time(self.page)
            try:
                for session_name in find_filess(directory_path=path_accounts_folder, extension='session'):
                    client = await self.tg_connect.get_telegram_client(session_name,
                                                                       account_directory=path_accounts_folder)
                    dialogs = client.iter_dialogs()
                    await log_and_display(f"–î–∏–∞–ª–æ–≥–∏: {dialogs}", self.page)
                    async for dialog in dialogs:
                        await log_and_display(f"{dialog.name}, {dialog.id}", self.page)
                        await client.delete_dialog(dialog)
                    await client.disconnect()
            except Exception as error:
                logger.exception(error)
            await end_time(start, self.page)

        async def add_items(_):
            """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã"""
            start = await start_time(self.page)
            for session_name in find_filess(directory_path=path_accounts_folder, extension='session'):
                # client = await self.tg_connect.get_telegram_client(session_name,
                #                                                    account_directory=path_accounts_folder)
                session_string = await get_string_session(session_name)
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è StringSession –∏ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É
                client = TelegramClient(
                    StringSession(session_string),  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession
                    api_id=7655060,
                    api_hash="cc1290cd733c1f1d407598e5a31be4a8",
                    system_version="4.16.30-vxCUSTOM",
                )
                await client.connect()
                await getting_account_data(client, self.page)

                if client is None:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                    # pass  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                # string_session = string_session.session.save()
                # logger.info("üì¶ String session:", string_session)
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                links_inviting: list = get_writing_group_links()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await log_and_display(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:  {links_inviting}", self.page)
                for link_tuple in links_inviting:
                    # link = link_tuple[0]
                    await log_and_display(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:  {link_tuple}", self.page)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
                    logger.info(f"–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {session_name}")
                    await self.checking_links(client, link_tuple)
                try:
                    await client.disconnect()
                except sqlite3.DatabaseError:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª / –≥—Ä—É–ø–ø—É, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω")
            await end_time(start, self.page)

        async def save(_):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É writing_group_links, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            writing_group_links = link_entry_field.value.strip().split()
            data_to_save = {
                "writing_group_links": writing_group_links,
            }
            write_writing_group_links_to_db(data_to_save)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        async def btn_click(_) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""
            try:
                smaller_times = int(smaller_timex.value)
                larger_times = int(larger_timex.value)
                if smaller_times < larger_times:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ
                    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏ –≤—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    writing_settings_to_a_file(
                        await recording_limits_file(str(smaller_times), str(larger_times), variable="time_subscription",
                                                    page=self.page))
                    list_view.controls.append(ft.Text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
                    await show_notification(self.page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
                    # page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                else:
                    list_view.controls.append(ft.Text("–û—à–∏–±–∫–∞: –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ!"))
            except ValueError:
                list_view.controls.append(ft.Text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!"))
            self.page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

        time_range = [time_subscription_1, time_subscription_2]
        self.page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        for time_range_message in time_range: list_view.controls.append(
            ft.Text(f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ {time_range_message}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        link_entry_field, save_button = await SubscriptionLinkInputSection().create_link_input_and_save_button(save)
        # –î–≤–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        smaller_timex, larger_timex, save_button_time = await TimeIntervalInputSection().create_time_inputs_and_save_button(
            btn_click)

        self.page.views.append(
            ft.View("/subscribe_unsubscribe",
                    [await GUIProgram().key_app_bar(),
                     ft.Text(spans=[ft.TextSpan(
                         translations["ru"]["menu"]["subscribe_unsubscribe"],
                         ft.TextStyle(
                             size=20, weight=ft.FontWeight.BOLD,
                             foreground=ft.Paint(
                                 gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.Colors.PINK,
                                                                                      ft.Colors.PURPLE])), ), ), ], ),

                     list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù

                     ft.Divider(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                     ft.Text(
                         value="‚è± –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã.\n"
                               "ü§ñ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–¥–µ–ª–∞–µ—Ç –ø–∞—É–∑—É –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞,\n"
                               "üîÅ –∑–∞—Ç–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≥—Ä—É–ø–ø—É.",
                         size=14
                     ),
                     await TimeIntervalInputSection().build_time_input_row(smaller_timex, larger_timex,
                                                                           save_button_time),
                     ft.Divider(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                     ft.Text(
                         value="üîó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                               "üìå –ï—Å–ª–∏ –≤—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –∏—Ö —Ä–∞–Ω–µ–µ ‚Äî –≤–≤–æ–¥ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
                         size=14
                     ),
                     await SubscriptionLinkInputSection().build_link_input_row(link_entry_field, save_button),
                     ft.Divider(),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                     ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                         # üîî –ü–æ–¥–ø–∏—Å–∫–∞
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["subscribe_unsubscribe_menu"]["subscription"],
                                           on_click=add_items),
                         # üö´ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["subscribe_unsubscribe_menu"]["unsubscribe"],
                                           on_click=unsubscribe_all),
                     ])]))

    @staticmethod
    async def extract_channel_id(link):
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å https://t.me/+yjqd0uZQETc4NGEy –¥–æ yjqd0uZQETc4NGEy"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å 'https://t.me/'
        if link.startswith('https://t.me/'):
            return link[len('https://t.me/'):]
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Å 't.me/', —É–¥–∞–ª–∏–º 't.me/'
        elif link.startswith('t.me/'):
            return link[len('t.me/'):]
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        else:
            return None

    async def checking_links(self, client, link) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param link: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        """
        try:
            if link.startswith("https://t.me/+"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                link_hash = link.split("+")[-1]
                try:
                    result = await client(functions.messages.CheckChatInviteRequest(hash=link_hash))
                    if isinstance(result, types.ChatInvite):
                        await log_and_display(f"–°—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞: {link}, –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {result.title}, "
                                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.participants_count}, "
                                              f"–ú–µ–≥–∞-–≥—Ä—É–ø–ø–∞: {'–î–∞' if result.megagroup else '–ù–µ—Ç'}, –û–ø–∏—Å–∞–Ω–∏–µ: {result.about or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}",
                                              self.page)
                        try:
                            await log_and_display(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é {link}", self.page)
                            try:
                                await client(ImportChatInviteRequest(
                                    link_hash))  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
                            except InviteHashInvalidError:
                                await log_and_display(translations["ru"]["errors"]["invite_request_sent"], self.page)
                        except InviteHashExpiredError:
                            await log_and_display(translations["ru"]["errors"]["subscribe_error"], self.page)
                            try:
                                await client(ImportChatInviteRequest(
                                    link_hash))  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
                                await log_and_display(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é {link_hash}",
                                                      self.page)
                            except InviteHashInvalidError:
                                await log_and_display(translations["ru"]["errors"]["invite_request_sent"], self.page)
                    elif isinstance(result, types.ChatInviteAlready):
                        await log_and_display(
                            f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ: {link}, –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {result.chat.title}", self.page)
                except FloodWaitError as e:
                    await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", self.page, level="error")

            elif link.startswith("https://t.me/"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã
                username = link.split("/")[-1]

                result = await client(functions.contacts.ResolveUsernameRequest(username=username))
                chat = result.chats[0] if result.chats else None
                if chat:
                    await log_and_display(f"–ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª: {link}, –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}, "
                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.participants_count if hasattr(chat, 'participants_count') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, "
                                          f"–ú–µ–≥–∞-–≥—Ä—É–ø–ø–∞: {'–î–∞' if getattr(chat, 'megagroup', False) else '–ù–µ—Ç'}",
                                          self.page)
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ {link}")
                    try:
                        await client(JoinChannelRequest(link))
                    except ChannelsTooMuchError:
                        await log_and_display(translations["ru"]["errors"]["user_channels_too_much"], self.page)
                else:
                    await log_and_display(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç: {link}", self.page)

            else:
                # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ö—ç—à
                try:
                    result = await client(functions.messages.CheckChatInviteRequest(hash=link))
                    if isinstance(result, types.ChatInvite):
                        await log_and_display(f"–°—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞: {link}, –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {result.title}, "
                                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.participants_count}, "
                                              f"–ú–µ–≥–∞-–≥—Ä—É–ø–ø–∞: {'–î–∞' if result.megagroup else '–ù–µ—Ç'}, "
                                              f"–û–ø–∏—Å–∞–Ω–∏–µ: {result.about or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}",
                                              self.page)
                        await client(JoinChannelRequest(link))
                    elif isinstance(result, types.ChatInviteAlready):
                        await log_and_display(
                            f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ: {link}, –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {result.chat.title}", self.page)
                except FloodWaitError as e:
                    await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", self.page, level="error")
                except InviteHashExpiredError:
                    await log_and_display(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏: {link}", self.page)
                    result = await client(functions.contacts.ResolveUsernameRequest(username=link))
                    chat = result.chats[0] if result.chats else None
                    if chat:
                        await log_and_display(f"–ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª: {link}, –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}, "
                                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.participants_count if hasattr(chat, 'participants_count') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, "
                                              f"–ú–µ–≥–∞-–≥—Ä—É–ø–ø–∞: {'–î–∞' if getattr(chat, 'megagroup', False) else '–ù–µ—Ç'}",
                                              self.page)
                    else:
                        await log_and_display(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç: {link}", self.page)

                except AuthKeyUnregisteredError:
                    await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], self.page)
                    await asyncio.sleep(2)
                except SessionPasswordNeededError:
                    await log_and_display(translations["ru"]["errors"]["two_factor_required"], self.page)
                    await asyncio.sleep(2)

        except FloodWaitError as e:
            await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", self.page, level="error")
        except InviteRequestSentError:
            await log_and_display(translations["ru"]["errors"]["invite_request_sent"], self.page)
        except AuthKeyUnregisteredError:
            await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], self.page)
            await asyncio.sleep(2)
        except SessionPasswordNeededError:
            await log_and_display(translations["ru"]["errors"]["two_factor_required"], self.page)
            await asyncio.sleep(2)

    # async def subscribe_telegram(self, page: ft.Page) -> None:
    #     """
    #     –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª—ã Telegram
    #
    #     :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    #     """
    #
    #     # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–¥—Å–æ–≤—ã–≤–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ —Ä–∞–±–æ—á–∏–µ
    #     #  —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º
    #
    #     async def back_button_clicked(_):
    #         """
    #         ‚¨ÖÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞—è –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª—ã Telegram.
    #         """
    #         page.go("/subscribe_unsubscribe")  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª—ã Telegram. üè†
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    #     page.views.append(
    #         ft.View(
    #             "/subscription_all",
    #             [
    #                 ft.Text(value="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª—ã Telegram"),  # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    #                 list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
    #                 ft.Column(),  # –†–µ–∑–µ—Ä–≤ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    #                 # ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT, text="üöÄ –ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    #                 #                   on_click=add_items),  # –ö–Ω–æ–ø–∫–∞ "üöÄ –ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    #                 ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
    #                                   text=translations["ru"]["buttons"]["back"],
    #                                   on_click=back_button_clicked)  # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    #             ],
    #         )
    #     )
    #
    #     page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ

    async def unsubscribe_from_the_group(self, client, group_link) -> None:
        """
        –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã.

        :param group_link: –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
        :param client: –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
        """
        logger.info(f"–û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã: {group_link}")
        try:
            entity = await client.get_entity(group_link)
            if entity:
                await client(LeaveChannelRequest(entity))
            # await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
        except ChannelPrivateError:  # –ê–∫–∫–∞—É–Ω—Ç Telegram –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            await log_and_display(translations["ru"]["errors"]["channel_private"], self.page)
        except UserNotParticipantError:
            await log_and_display(translations["ru"]["errors"]["unsubscribe_not_member"], self.page)
        except SessionRevokedError:
            await log_and_display(translations["ru"]["errors"]["invalid_auth_session_terminated"], self.page)
        except sqlite3.DatabaseError:
            await log_and_display(
                f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª {group_link}. –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                self.page)
        except ConnectionError:
            await log_and_display("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram", self.page)
        # except Exception as error:
        #     logger.exception(error)

        # finally:
        #     await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram

# 409
