# -*- coding: utf-8 -*-
import asyncio
import datetime as dt

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from scheduler.asyncio import Scheduler
from telethon.errors import (AuthKeyDuplicatedError, PeerFloodError, FloodWaitError, UserPrivacyRestrictedError,
                             UserChannelsTooMuchError, BotGroupsBlockedError, ChatWriteForbiddenError,
                             UserBannedInChannelError, UserNotMutualContactError, ChatAdminRequiredError,
                             UserKickedError, ChannelPrivateError, UserIdInvalidError, UsernameNotOccupiedError,
                             UsernameInvalidError, InviteRequestSentError, TypeNotFoundError, SessionRevokedError,
                             UserDeactivatedBanError, AuthKeyUnregisteredError, BadRequestError)
from telethon.tl.functions.channels import InviteToChannelRequest

from src.core.configs import (ConfigReader, line_width_button, BUTTON_HEIGHT, path_accounts_folder, limits,
                              time_inviting_1, time_inviting_2)
from src.core.sqlite_working_tools import DatabaseHandler
from src.core.utils import record_and_interrupt, record_inviting_results, find_filess
from src.features.account.TGConnect import TGConnect
from src.features.account.TGSubUnsub import SubscribeUnsubscribeTelegram
from src.gui.gui import start_time, end_time, list_view, log_and_display
from src.gui.menu import show_notification
from src.locales.translations_loader import translations


class InvitingToAGroup:

    def __init__(self):
        self.db_handler = DatabaseHandler()
        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()
        self.tg_connect = TGConnect()
        self.config_reader = ConfigReader()
        self.hour, self.minutes = self.config_reader.get_hour_minutes_every_day()
        self.scheduler = Scheduler()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

    async def getting_an_invitation_link_from_the_database(self, page: ft.Page):
        """"
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        """
        try:
            return await self.db_handler.open_and_read_data(table_name="links_inviting",
                                                            page=page)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        except Exception as error:
            logger.exception(error)
            raise

    async def data_for_inviting(self, page: ft.Page):
        """"
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        """
        number_usernames: list = await self.db_handler.select_records_with_limit(table_name="members", limit=None)
        find_filesss = await find_filess(directory_path=path_accounts_folder, extension='session')
        await log_and_display(f"–õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {limits}\n"
                              f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(number_usernames)}\n"
                              f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã {find_filesss}\n"
                              f"–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(find_filesss)}\n", page)

    async def general_invitation_to_the_group(self, page: ft.Page, dropdown):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param dropdown:
        :return:
        """
        start = await start_time(page)
        page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
        try:
            for session_name in await find_filess(directory_path=path_accounts_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                   account_directory=path_accounts_folder)
                await log_and_display(f"{dropdown.value}", page)
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                await self.sub_unsub_tg.subscribe_to_group_or_channel(client, dropdown.value, page)
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ usernames
                number_usernames: list = await self.db_handler.select_records_with_limit(table_name="members",
                                                                                         limit=limits)
                if len(number_usernames) == 0:
                    await log_and_display(f"–í —Ç–∞–±–ª–∏—Ü–µ members –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞", page)
                    await self.sub_unsub_tg.unsubscribe_from_the_group(client, dropdown.value, page)
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                for username in number_usernames:
                    await log_and_display(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å username:{username[0]}", page)
                    # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É

                    try:
                        await log_and_display(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username[0]} –≤ –≥—Ä—É–ø–ø—É {dropdown.value}.", page)
                        await client(InviteToChannelRequest(dropdown.value, [username[0]]))
                        await log_and_display(f"–£–¥–∞—á–Ω–æ! –°–ø–∏–º 5 —Å–µ–∫—É–Ω–¥", page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    except UserChannelsTooMuchError:
                        await log_and_display(translations["ru"]["errors"]["user_channels_too_much"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except UserNotMutualContactError:
                        await log_and_display(translations["ru"]["errors"]["user_not_mutual_contact"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except (UserKickedError, UserDeactivatedBanError):
                        await log_and_display(translations["ru"]["errors"]["user_kicked_or_banned"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except (UserIdInvalidError, UsernameNotOccupiedError, ValueError, UsernameInvalidError):
                        await log_and_display(translations["ru"]["errors"]["invalid_username"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except ChatAdminRequiredError:
                        await log_and_display(translations["ru"]["errors"]["admin_rights_required"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except UserPrivacyRestrictedError:
                        await log_and_display(translations["ru"]["errors"]["user_privacy_restricted"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except BotGroupsBlockedError:
                        await log_and_display(translations["ru"]["errors"]["bot_group_blocked"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except (TypeError, UnboundLocalError):
                        await log_and_display(translations["ru"]["errors"]["type_or_scope"], page)
                    except BadRequestError:
                        await log_and_display(translations["ru"]["errors"]["chat_member_add_failed"], page)

                    # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
                    except ChatWriteForbiddenError:
                        await log_and_display(translations["ru"]["errors"]["chat_write_forbidden"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except InviteRequestSentError:
                        await log_and_display(translations["ru"]["errors"]["invite_request_sent"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except (ChannelPrivateError, TypeNotFoundError, AuthKeyDuplicatedError, UserBannedInChannelError,
                            SessionRevokedError):
                        await log_and_display(translations["ru"]["errors"]["invalid_auth_session_terminated"], page)
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except FloodWaitError as e:
                        await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", page, level="error")
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except AuthKeyUnregisteredError:
                        await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], page)
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break
                    except PeerFloodError:
                        await log_and_display(translations["ru"]["errors"]["peer_flood"], page, level="error")
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except KeyboardInterrupt:  # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
                        await log_and_display(translations["ru"]["errors"]["script_stopped"], page, level="error")
                    except Exception as error:
                        logger.exception(error)
                    else:
                        await log_and_display(
                            f"[+] –£—á–∞—Å—Ç–Ω–∏–∫ {username} –¥–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {dropdown.value}",
                            page=page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page=page)
                await self.sub_unsub_tg.unsubscribe_from_the_group(client, dropdown.value, page=page)
            await log_and_display(f"[!] –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ–∫–æ–Ω—á–µ–Ω!", page=page)
        except Exception as error:
            logger.exception(error)
        await end_time(start, page=page)
        await show_notification(page, "üîö –ö–æ–Ω–µ—Ü –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")  # –í—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        page.go("/inviting")  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ üè†

    async def inviting_without_limits(self, page: ft.Page) -> None:
        """
        üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥. –ì—Ä—É–ø–ø–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
        –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ª–æ–≥ —Ñ–∞–π–ª.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ
        links_inviting = await self.getting_an_invitation_link_from_the_database(
            page)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        await self.data_for_inviting(page)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        async def add_items(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            """
            await self.general_invitation_to_the_group(page, dropdown)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        dropdown = ft.Dropdown(width=line_width_button,
                               options=[ft.DropdownOption(link[0]) for link in links_inviting],
                               autofocus=True)

        await self.create_invite_page(page, dropdown, add_items)

    async def launching_invite_every_day_certain_time(self, page: ft.Page) -> None:
        """
        üìÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ
        links_inviting = await self.getting_an_invitation_link_from_the_database(
            page)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        await self.data_for_inviting(page)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        async def add_items(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            """

            async def general_invitation_to_the_group_scheduler():
                await self.general_invitation_to_the_group(page, dropdown)

            await log_and_display(f"–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {self.hour}:{self.minutes}", page)
            self.scheduler.daily(dt.time(hour=int(self.hour), minute=int(self.minutes)),
                                 general_invitation_to_the_group_scheduler)
            while True:
                await asyncio.sleep(1)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        dropdown = ft.Dropdown(width=line_width_button, options=[ft.DropdownOption(link[0]) for link in links_inviting],
                               autofocus=True)
        await self.create_invite_page(page, dropdown, add_items)

    async def launching_an_invite_once_an_hour(self, page: ft.Page) -> None:
        """
        ‚è∞ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ 1 —Ä–∞–∑ –≤ —á–∞—Å. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 1 —Ä–∞–∑ –≤ —á–∞—Å.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ
        links_inviting = await self.getting_an_invitation_link_from_the_database(
            page)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        await self.data_for_inviting(page)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        async def add_items(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            """
            try:

                async def general_invitation_to_the_group_scheduler():
                    await self.general_invitation_to_the_group(page, dropdown)

                await log_and_display("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ 00 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞", page)
                self.scheduler.hourly(dt.time(minute=00, second=00),
                                      general_invitation_to_the_group_scheduler)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                while True:
                    await asyncio.sleep(1)
            except Exception as error:
                logger.exception(error)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        dropdown = ft.Dropdown(width=line_width_button,
                               options=[ft.DropdownOption(link[0]) for link in links_inviting],
                               autofocus=True)
        await self.create_invite_page(page, dropdown, add_items)

    @staticmethod
    async def create_invite_page(page: ft.Page, dropdown, add_items) -> None:

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.views.append(
            ft.View(
                "/inviting",
                [
                    list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                    ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"),  # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                    dropdown,  # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
                    ft.Column(),  # –†–µ–∑–µ—Ä–≤ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                      text=translations["ru"]["buttons"]["start"],
                                      on_click=add_items),  # –ö–Ω–æ–ø–∫–∞ "üöÄ –ù–∞—á–∞—Ç—å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥"
                    ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                      text=translations["ru"]["buttons"]["back"],
                                      on_click=lambda _: page.go("/inviting"))  # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
            )
        )

        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ

    async def schedule_invite(self, page: ft.Page) -> None:
        """
        üïí –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """

        page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

        links_inviting = await self.getting_an_invitation_link_from_the_database(
            page)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        await self.data_for_inviting(page)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        async def add_items(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            """
            try:
                async def general_invitation_to_the_group_scheduler():
                    await self.general_invitation_to_the_group(page, dropdown)

                await log_and_display(f"–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {self.hour}:{self.minutes}", page)

                self.scheduler.once(dt.time(hour=int(self.hour), minute=int(self.minutes)),
                                    general_invitation_to_the_group_scheduler)
                while True:
                    await asyncio.sleep(1)

            except Exception as error:
                logger.exception(error)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        dropdown = ft.Dropdown(width=line_width_button,
                               options=[ft.DropdownOption(link[0]) for link in links_inviting],
                               autofocus=True)

        await self.create_invite_page(page, dropdown, add_items)
