# -*- coding: utf-8 -*-
import asyncio
import datetime as dt

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from scheduler.asyncio import Scheduler
from telethon.errors import (AuthKeyDuplicatedError, AuthKeyUnregisteredError, BadRequestError, BotGroupsBlockedError,
                             ChannelPrivateError, ChatAdminRequiredError, ChatWriteForbiddenError, FloodWaitError,
                             InviteRequestSentError, PeerFloodError, SessionRevokedError, TypeNotFoundError,
                             UserBannedInChannelError, UserChannelsTooMuchError, UserDeactivatedBanError,
                             UserIdInvalidError, UserKickedError, UsernameInvalidError, UsernameNotOccupiedError,
                             UserNotMutualContactError, UserPrivacyRestrictedError)
from telethon.tl.functions.channels import InviteToChannelRequest

from src.core.configs import (BUTTON_HEIGHT, ConfigReader, LIMITS, WIDTH_WIDE_BUTTON, path_accounts_folder,
                              time_inviting_1, time_inviting_2)
from src.core.sqlite_working_tools import select_records_with_limit, get_links_inviting, save_links_inviting
from src.core.utils import find_filess, record_and_interrupt, record_inviting_results
from src.features.account.TGConnect import TGConnect
from src.features.account.TGSubUnsub import SubscribeUnsubscribeTelegram
from src.features.account.parsing.gui_elements import GUIProgram
from src.gui.gui import end_time, list_view, log_and_display, start_time
from src.gui.notification import show_notification
from src.locales.translations_loader import translations


class InvitingToAGroup:

    def __init__(self):
        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()
        self.tg_connect = TGConnect()
        self.config_reader = ConfigReader()
        self.hour, self.minutes = self.config_reader.get_hour_minutes_every_day()
        self.scheduler = Scheduler()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

    async def inviting_menu(self, page: ft.Page):
        """
        –ú–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        list_view.controls.clear()  # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        page.controls.append(list_view)  # –î–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ
        links_inviting = get_links_inviting()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.data_for_inviting(page)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        dropdown = ft.Dropdown(width=WIDTH_WIDE_BUTTON, options=[ft.DropdownOption(link) for link in links_inviting],
                               autofocus=True)

        async def save(_):
            """–ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
            links = link_entry_field.value.strip().split()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å—Å—ã–ª–∫—É(–∏): {links}")
            data_to_save = {
                "links_inviting": links,
            }
            save_links_inviting(data_to_save)
            logger.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {data_to_save}")
            await log_and_display("‚úÖ –°—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", page)

            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
            updated_links = get_links_inviting()
            dropdown.options = [ft.dropdown.Option(link) for link in updated_links]
            dropdown.value = links[0] if links else None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        async def inviting_without_limits(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥. –ì—Ä—É–ø–ø–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
            –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ª–æ–≥ —Ñ–∞–π–ª.
            """
            await self.general_invitation_to_the_group(page, dropdown)

        async def launching_an_invite_once_an_hour(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            ‚è∞ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ 1 —Ä–∞–∑ –≤ —á–∞—Å. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 1 —Ä–∞–∑ –≤ —á–∞—Å.
            """
            try:
                async def general_invitation_group_scheduler():
                    await self.general_invitation_to_the_group(page, dropdown)

                await log_and_display("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ 00 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞", page)
                self.scheduler.hourly(dt.time(minute=00, second=00),
                                      general_invitation_group_scheduler)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                while True:
                    await asyncio.sleep(1)
            except Exception as error:
                logger.exception(error)

        async def schedule_invite(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            üïí –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
            """
            try:
                async def general_invitation_group_scheduler():
                    await self.general_invitation_to_the_group(page, dropdown)

                await log_and_display(f"–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {self.hour}:{self.minutes}", page)
                self.scheduler.once(dt.time(hour=int(self.hour), minute=int(self.minutes)),
                                    general_invitation_group_scheduler)
                while True:
                    await asyncio.sleep(1)
            except Exception as error:
                logger.exception(error)

        async def launching_invite_every_day_certain_time(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            üìÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
            """

            async def general_invitation_group_scheduler():
                await self.general_invitation_to_the_group(page, dropdown)

            await log_and_display(f"–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {self.hour}:{self.minutes}", page)
            self.scheduler.daily(dt.time(hour=int(self.hour), minute=int(self.minutes)),
                                 general_invitation_group_scheduler)
            while True:
                await asyncio.sleep(1)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞, –¥–ª—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        link_entry_field = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞",
                                        label_style=ft.TextStyle(color=ft.Colors.GREY_400), width=700
                                        )
        save_button = ft.IconButton(visible=True, icon=ft.Icons.SAVE, on_click=save, icon_size=50)

        page.views.append(
            ft.View("/inviting",
                    [await GUIProgram().key_app_bar(),
                     ft.Text(spans=[ft.TextSpan(
                         translations["ru"]["inviting_menu"]["inviting"],
                         ft.TextStyle(size=20, weight=ft.FontWeight.BOLD,
                                      foreground=ft.Paint(
                                          gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.Colors.PINK,
                                                                                               ft.Colors.PURPLE])), ), ), ], ),
                     list_view,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù

                     ft.Row(
                         controls=[link_entry_field, save_button],
                         alignment=ft.MainAxisAlignment.SPACE_BETWEEN  # –∏–ª–∏ .START
                     ),

                     ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"),  # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                     dropdown,  # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø

                     ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                         # üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["inviting_menu"]["inviting"],
                                           on_click=inviting_without_limits),
                         # ‚è∞ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ 1 —Ä–∞–∑ –≤ —á–∞—Å
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["inviting_menu"]["invitation_1_time_per_hour"],
                                           on_click=launching_an_invite_once_an_hour),
                         # üïí –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["inviting_menu"]["invitation_at_a_certain_time"],
                                           on_click=schedule_invite),
                         # üìÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                         ft.ElevatedButton(width=WIDTH_WIDE_BUTTON, height=BUTTON_HEIGHT,
                                           text=translations["ru"]["inviting_menu"]["inviting_every_day"],
                                           on_click=launching_invite_every_day_certain_time),
                     ])]))
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ

    async def data_for_inviting(self, page: ft.Page):
        """"
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        """
        usernames = select_records_with_limit(limit=None)
        logger.info(usernames)
        find_filesss = await find_filess(directory_path=path_accounts_folder, extension='session')
        await log_and_display(f"–õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {LIMITS}\n"
                              f"–í—Å–µ–≥–æ usernames: {len(usernames)}\n"
                              f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã {find_filesss}\n"
                              f"–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(find_filesss)}\n", page)

    async def general_invitation_to_the_group(self, page: ft.Page, dropdown):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param dropdown:
        :return:
        """
        start = await start_time(page)
        page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
        try:
            for session_name in await find_filess(directory_path=path_accounts_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                   account_directory=path_accounts_folder)
                await log_and_display(f"{dropdown.value}", page)
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                await self.sub_unsub_tg.subscribe_to_group_or_channel(client, dropdown.value, page)
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ usernames
                usernames = select_records_with_limit(limit=LIMITS)
                if len(usernames) == 0:
                    await log_and_display(f"–í —Ç–∞–±–ª–∏—Ü–µ members –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞", page)
                    await self.sub_unsub_tg.unsubscribe_from_the_group(client, dropdown.value, page)
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                for username in usernames:
                    await log_and_display(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å username:{username[0]}", page)
                    # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É

                    try:
                        await log_and_display(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username[0]} –≤ –≥—Ä—É–ø–ø—É {dropdown.value}.", page)
                        await client(InviteToChannelRequest(dropdown.value, [username[0]]))
                        await log_and_display(f"–£–¥–∞—á–Ω–æ! –°–ø–∏–º 5 —Å–µ–∫—É–Ω–¥", page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    except UserChannelsTooMuchError:
                        await log_and_display(translations["ru"]["errors"]["user_channels_too_much"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except UserNotMutualContactError:
                        await log_and_display(translations["ru"]["errors"]["user_not_mutual_contact"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except (UserKickedError, UserDeactivatedBanError):
                        await log_and_display(translations["ru"]["errors"]["user_kicked_or_banned"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except (UserIdInvalidError, UsernameNotOccupiedError, ValueError, UsernameInvalidError):
                        await log_and_display(translations["ru"]["errors"]["invalid_username"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except ChatAdminRequiredError:
                        await log_and_display(translations["ru"]["errors"]["admin_rights_required"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except UserPrivacyRestrictedError:
                        await log_and_display(translations["ru"]["errors"]["user_privacy_restricted"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except BotGroupsBlockedError:
                        await log_and_display(translations["ru"]["errors"]["bot_group_blocked"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                    except (TypeError, UnboundLocalError):
                        await log_and_display(translations["ru"]["errors"]["type_or_scope"], page)
                    except BadRequestError:
                        await log_and_display(translations["ru"]["errors"]["chat_member_add_failed"], page)
                    # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
                    except ChatWriteForbiddenError:
                        await log_and_display(translations["ru"]["errors"]["chat_write_forbidden"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except InviteRequestSentError:
                        await log_and_display(translations["ru"]["errors"]["invite_request_sent"], page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except (ChannelPrivateError, TypeNotFoundError, AuthKeyDuplicatedError, UserBannedInChannelError,
                            SessionRevokedError):
                        await log_and_display(translations["ru"]["errors"]["invalid_auth_session_terminated"], page)
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except FloodWaitError as e:
                        await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", page, level="error")
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except AuthKeyUnregisteredError:
                        await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], page)
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break
                    except PeerFloodError:
                        await log_and_display(translations["ru"]["errors"]["peer_flood"], page, level="error")
                        await record_and_interrupt(time_inviting_1, time_inviting_2, page)
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    except KeyboardInterrupt:  # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
                        await log_and_display(translations["ru"]["errors"]["script_stopped"], page, level="error")
                    except Exception as error:
                        logger.exception(error)
                    else:
                        await log_and_display(
                            f"[+] –£—á–∞—Å—Ç–Ω–∏–∫ {username} –¥–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {dropdown.value}",
                            page=page)
                        await record_inviting_results(time_inviting_1, time_inviting_2, username, page=page)
                await self.sub_unsub_tg.unsubscribe_from_the_group(client, dropdown.value, page=page)
            await log_and_display(f"[!] –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ–∫–æ–Ω—á–µ–Ω!", page=page)
        except Exception as error:
            logger.exception(error)
        await end_time(start, page=page)
        await show_notification(page, "üîö –ö–æ–Ω–µ—Ü –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")  # –í—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        page.go("/inviting")  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ üè†
