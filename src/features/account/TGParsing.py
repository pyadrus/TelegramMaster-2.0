# -*- coding: utf-8 -*-
import asyncio
import datetime
import time

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import functions, types
from telethon.errors import AuthKeyUnregisteredError, ChatAdminRequiredError, ChannelPrivateError
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import (ChannelParticipantsAdmins, UserProfilePhoto, ChannelParticipantsSearch, InputPeerEmpty,
                               UserStatusEmpty, InputUser, UserStatusLastMonth, UserStatusLastWeek, UserStatusOffline,
                               UserStatusOnline, UserStatusRecently)

from src.core.configs import path_parsing_folder, line_width_button, BUTTON_HEIGHT, time_activity_user_2
from src.core.localization import back_button, start_button, done_button
from src.core.sqlite_working_tools import DatabaseHandler, db, GroupsAndChannels, remove_duplicates, MembersAdmin
from src.core.utils import find_filess
from src.features.account.TGConnect import TGConnect
from src.features.account.TGSubUnsub import SubscribeUnsubscribeTelegram
from src.gui.menu import log_and_display


class ParsingGroupMembers:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç."""

    def __init__(self):
        self.db_handler = DatabaseHandler()
        self.tg_connect = TGConnect()
        self.tg_subscription_manager = SubscribeUnsubscribeTelegram()

    async def clean_parsing_list_and_remove_duplicates(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""

        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.db_handler.remove_records_without_username()
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        await self.db_handler.remove_duplicate_ids(table_name="members", column_name="id")

    def back_button_clicked(self, page):
        """
        ‚¨ÖÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞—è –≤ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞.
        """
        page.go("/parsing")  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ üè†

    async def get_user_online_status(self, user):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
        https://core.telegram.org/type/UserStatus
        :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telethon
        :return: –°—Ç—Ä–æ–∫–∞ –∏–ª–∏ datetime, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω–∞
        """
        online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if user.status:
            if isinstance(user.status, UserStatusOffline):
                online_at = user.status.was_online
            elif isinstance(user.status, UserStatusRecently):
                online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"
            elif isinstance(user.status, UserStatusLastWeek):
                online_at = "–ë—ã–ª(–∞) –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
            elif isinstance(user.status, UserStatusLastMonth):
                online_at = "–ë—ã–ª(–∞) –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
            elif isinstance(user.status, UserStatusOnline):
                online_at = user.status.expires
            elif isinstance(user.status, UserStatusEmpty):
                online_at = "–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        return online_at

    async def obtaining_administrators(self, client, groups):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –≥—Ä—É–ø–ø—ã, –≤–∫–ª—é—á–∞—è –∏—Ö –±–∏–æ–≥—Ä–∞—Ñ–∏—é, —Å—Ç–∞—Ç—É—Å, —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            entity = await client.get_entity(groups[0])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
            if hasattr(entity, 'megagroup') and entity.megagroup:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                async for user in client.iter_participants(entity, filter=ChannelParticipantsAdmins):
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        admin_name = (user.first_name or "").strip()
                        if user.last_name:
                            admin_name += f" {user.last_name}"
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        full_user = await client(GetFullUserRequest(id=user.id))
                        bio = full_user.full_user.about or ""
                        photos_id = "C —Ñ–æ—Ç–æ" if isinstance(user.photo, UserProfilePhoto) else "–ë–µ–∑ —Ñ–æ—Ç–æ"
                        online_at = await self.get_user_online_status(user)
                        user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        user_status = "Admin"

                        log_data = {
                            "username": user.username or "", "user_id": user.id,
                            "access_hash": user.access_hash, "first_name": user.first_name or "",
                            "last_name": user.last_name or "", "phone": user.phone or "",
                            "online_at": online_at, "photo_status": photos_id,
                            "premium_status": user_premium, "user_status": user_status,
                            "bio": bio or "", "group": groups[0]
                        }
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
                        await asyncio.sleep(0.5)
                        logger.info(log_data)

                        with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                            MembersAdmin.create(
                                username=log_data['username'], user_id=log_data['user_id'],
                                access_hash=log_data['access_hash'], first_name=log_data['first_name'],
                                last_name=log_data['last_name'], phone=log_data['phone'],
                                online_at=log_data['online_at'], photo_status=log_data['photo_status'],
                                premium_status=log_data['premium_status'], user_status=log_data['user_status'],
                                bio=log_data['bio'], group_name=log_data['group'],
                            )
                    except Exception as e:
                        logger.exception(e)
                # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                await self.db_handler.delete_row_db(table="writing_group_links", column="writing_group_links",
                                                    value=groups)
            else:
                logger.info(f"–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –∞ –∫–∞–Ω–∞–ª: {entity.title}")
        except ChatAdminRequiredError:
            logger.info(f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ: {groups[0]}")
        except Exception as e:
            logger.exception(e)

    async def parse_groups(self, page: ft.Page) -> None:
        """
        üîç –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø Telegram –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ GUI.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ ‚è±Ô∏è
        admin_switch = ft.CupertinoSwitch(
            label="–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
            value=False,
            tooltip="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø."
        )
        account_groups_switch = ft.CupertinoSwitch(
            label="–ü–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç",
            value=False,
            tooltip="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç."
        )
        members_switch = ft.CupertinoSwitch(
            label="–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            value=False,
            tooltip="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø."
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        def toggle_admin_switch(e):
            if admin_switch.value:
                account_groups_switch.value = False
                members_switch.value = False
            page.update()

        def toggle_account_groups_switch(e):
            if account_groups_switch.value:
                admin_switch.value = False
                members_switch.value = False
            page.update()

        def toggle_members_switch(e):
            if members_switch.value:
                admin_switch.value = False
                account_groups_switch.value = False
            page.update()

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        admin_switch.on_change = toggle_admin_switch
        account_groups_switch.on_change = toggle_account_groups_switch
        members_switch.on_change = toggle_members_switch

        list_view = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

        async def add_items(_):
            """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
            # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await log_and_display(f"‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}", list_view, page)
            page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ üìÇ
                for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                    client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                       account_directory=path_parsing_folder)
                    if account_groups_switch.value:
                        await log_and_display(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {session_name}", list_view, page)
                        await log_and_display(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç", list_view,
                                              page)
                        await self.forming_a_list_of_groups(client, list_view, page)
                        # await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
                        remove_duplicates()  # –ß–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üßπ (—Ç–∞–±–ª–∏—Ü–∞ groups_and_channels, –∫–æ–ª–æ–Ω–∫–∞ id)

                    if admin_switch.value:
                        for groups in await self.db_handler.open_and_read_data("writing_group_links"):
                            await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups[0]}", list_view, page)
                            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üë§
                            await self.obtaining_administrators(client, groups)

                    if members_switch.value:
                        for groups in await self.db_handler.open_and_read_data("writing_group_links"):
                            await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups[0]}", list_view, page)
                            # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É
                            await self.tg_subscription_manager.subscribe_to_group_or_channel(client, groups[0])
                            await self.parse_group(client, groups[0], list_view, page)  # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
                            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                            await self.db_handler.delete_row_db(table="writing_group_links",
                                                                column="writing_group_links", value=groups)
                            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                            await self.clean_parsing_list_and_remove_duplicates()
                            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üîå
                    await client.disconnect()
            except Exception as error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚è∞
            await log_and_display(
                f"üîö –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                list_view, page)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.views.append(
            ft.View(
                "/parsing",
                [
                    list_view,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                    ft.Column([admin_switch, account_groups_switch, members_switch]),
                    # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    ft.Column(),  # —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=start_button,
                                      on_click=add_items),  # –ö–Ω–æ–ø–∫–∞ "üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"
                    ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=back_button,
                                      on_click=lambda _: self.back_button_clicked(page))  # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
            )
        )
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ

    async def parse_group(self, client, groups_wr, lv, page) -> None:
        """
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ê—Ä–≥—É–º–µ–Ω—Ç phone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        @handle_exceptions –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö user_data/software_database.db.

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param groups_wr: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
        :param lv: ListView
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º parsing –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª user_data/software_database.db
            entities: list = await self.get_all_participants(await self.parse_users(client, groups_wr, lv, page), lv,
                                                             page)
            await log_and_display(f"{entities}", lv, page)
            await self.db_handler.write_parsed_chat_participants_to_db(entities)
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def parse_active_users(self, chat_input, limit_active_user, lv, page) -> None:
        """
        Parsing —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤ —á–∞—Ç (–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

        :param chat_input: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        :param lv: ListView
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                   account_directory=path_parsing_folder)
                await self.tg_subscription_manager.subscribe_to_group_or_channel(client, chat_input)

                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ time_activity_user_2 –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–µ—Å–ª–∏ –æ–Ω–æ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
                    await asyncio.sleep(
                        int(time_activity_user_2 or 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –µ—Å–ª–∏ None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
                except TypeError:
                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, time_activity_user_2 –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø),
                    # —Ç–æ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 5 —Å–µ–∫—É–Ω–¥.
                    await asyncio.sleep(5)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –µ—Å–ª–∏ None –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø

                await self.get_active_users(client, chat_input, limit_active_user, lv, page)
                await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
            await self.clean_parsing_list_and_remove_duplicates()
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def get_active_users(self, client, chat, limit_active_user, lv, page) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        :param client: –∫–ª–∏–µ–Ω—Ç Telegram
        :param chat: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        :param lv: ListView
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            async for message in client.iter_messages(chat, limit=int(limit_active_user)):
                if message.from_id is not None:
                    try:
                        logger.info(f"{message.from_id}")
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = await client.get_entity(message.from_id.user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
                        from_user = InputUser(user_id=user.id, access_hash=user.access_hash)  # –°–æ–∑–¥–∞–µ–º InputUser
                        logger.info(f"{from_user}")
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        entities = await self.get_active_user_data(user)
                        await log_and_display(f"{entities}", lv, page)
                        await self.db_handler.write_parsed_chat_participants_to_db_active(entities)
                    except ValueError as e:
                        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_id.user_id}: {e}")
                else:
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ from_id.")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def filtering_groups(chats):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø.

        :param chats: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.
        :return: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        """
        groups = []
        for chat in chats:
            try:
                if chat.megagroup:
                    groups.append(chat)
            except AttributeError:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ megagroup
        return groups

    @staticmethod
    async def name_of_the_groups(groups):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.

        :param groups: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        :return: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.
        """
        group_names = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
        for group in groups:
            group_names.append(group.title)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫
        return group_names

    async def choose_and_parse_group(self, page: ft.Page) -> None:
        """
        üìå –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :return: None
        """
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)
        try:
            for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                   account_directory=path_parsing_folder)
                chats = []
                last_date = None
                result = await client(
                    GetDialogsRequest(offset_date=last_date, offset_id=0, offset_peer=InputPeerEmpty(), limit=200,
                                      hash=0))
                chats.extend(result.chats)
                groups = await self.filtering_groups(chats)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                group_titles = await self.name_of_the_groups(groups)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
                logger.info(group_titles)
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_text = ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")

                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
                async def handle_button_click(_) -> None:
                    start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
                    await log_and_display(f"‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start)}", lv, page)
                    await log_and_display(f"üìÇ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {dropdown.value}", lv, page)
                    await self.parse_group(client, dropdown.value, lv, page)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                    await self.clean_parsing_list_and_remove_duplicates()
                    await client.disconnect()
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
                    finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                    await log_and_display(
                        f"üîö –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start}", lv, page)
                    page.go("/parsing")

                # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
                dropdown = ft.Dropdown(width=line_width_button,
                                       options=[ft.dropdown.Option(title) for title in group_titles], autofocus=True)
                page.views.append(
                    ft.View(
                        "/parsing",
                        [
                            ft.Column(controls=[
                                dropdown,
                                ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                                  text="üìÇ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
                                                  on_click=handle_button_click),  # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É" üìÇ
                                ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=back_button,
                                                  on_click=lambda _: self.back_button_clicked(page)),
                                # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                                result_text, lv,
                            ])
                        ],
                    )  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                )
                page.update()
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def parse_users(client, target_group, lv, page: ft.Page):
        """
        üßë‚Äçü§ù‚Äçüßë –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞.
        –ú–µ—Ç–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ, —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª–µ.

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram.
        :param target_group: –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã.
        :param lv: –≠–ª–µ–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :return: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        """
        try:
            await log_and_display("üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...", lv, page)

            all_participants: list = []
            while_condition = True
            my_filter = ChannelParticipantsSearch("")
            offset = 0
            while while_condition:
                try:
                    participants = await client(
                        GetParticipantsRequest(channel=target_group, offset=offset, filter=my_filter, limit=200,
                                               hash=0))
                    all_participants.extend(participants.users)
                    offset += len(participants.users)
                    if len(participants.users) < 1:
                        while_condition = False
                except TypeError:
                    await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: {target_group} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º.", lv, page,
                                          level="error")
                    await asyncio.sleep(2)
                    break
                except ChatAdminRequiredError:
                    await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_group}", lv, page,
                                          level="error")
                    await asyncio.sleep(2)
                    break
                except ChannelPrivateError:
                    await log_and_display(
                        f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª / –∑–∞–∫—Ä—ã—Ç {target_group} –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ. –ó–∞–º–µ–Ω–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç",
                        lv, page, level="error")
                    await asyncio.sleep(2)
                    break
                except AuthKeyUnregisteredError:
                    await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                          lv, page, level="error")
                    await asyncio.sleep(2)
                    break

            return all_participants
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            raise

    async def get_all_participants(self, all_participants, lv, page: ft.Page) -> list:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        –ú–µ—Ç–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π.

        :param all_participants: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        :param lv: –≠–ª–µ–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :return: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        """
        try:
            entities: list = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for user in all_participants:
                await self.get_user_data(user, entities, lv, page)
            return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        except TypeError as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    async def get_user_data(self, user, entities, lv, page: ft.Page) -> None:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

        :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param entities: –°–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param lv: –≠–ª–µ–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username, user_phone, first_name, last_name, photos_id, online_at, user_premium = await self.receiving_data(
                user)
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
            entities.append(
                [username, user.id, user.access_hash, first_name, last_name, user_phone, online_at, photos_id,
                 user_premium])
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            lv.controls.append(ft.Text(
                f"{username}, {user.id}, {user.access_hash}, {first_name}, {last_name}, {user_phone}, {online_at}, {photos_id}, {user_premium}"))
            page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def receiving_data(self, user):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω,
        –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç.

        :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –ö–æ—Ä—Ç–µ–∂ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: username, user_phone, first_name, last_name, photos_id, online_at, user_premium.
        """
        usernames = user.username if user.username else ""
        user_phone = user.phone if user.phone else "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç"
        first_name = user.first_name if user.first_name else ""
        last_name = user.last_name if user.last_name else ""
        photos_id = ("C —Ñ–æ—Ç–æ" if isinstance(user.photo, types.UserProfilePhoto) else "–ë–µ–∑ —Ñ–æ—Ç–æ")
        online_at = await self.get_user_online_status(user)
        user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else ""
        return usernames, user_phone, first_name, last_name, photos_id, online_at, user_premium

    async def get_active_user_data(self, user):
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            username, user_phone, first_name, last_name, photos_id, online_at, user_premium = await self.receiving_data(
                user)
            entity = (
                username, user.id, user.access_hash, first_name, last_name, user_phone, online_at, photos_id,
                user_premium)
            return entity
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            raise

    @staticmethod
    async def forming_a_list_of_groups(client, lv, page: ft.Page) -> None:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤.

        –ú–µ—Ç–æ–¥ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö, –≤–∫–ª—é—á–∞—è –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        :param client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telegram.
        :param lv: ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            async for dialog in client.iter_dialogs():
                try:
                    entity = await client.get_entity(dialog.id)
                    full_channel_info = await client(functions.channels.GetFullChannelRequest(channel=entity))
                    channel_details = await client.get_entity(full_channel_info.full_chat)
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants_count = getattr(full_channel_info.full_chat, 'participants_count', 0)
                    # –í—Ä–µ–º—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    parsing_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                    await log_and_display(
                        f"{dialog.id}, {channel_details.title}, https://t.me/{channel_details.username}, {participants_count}",
                        lv, page)
                    with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                        GroupsAndChannels.create(
                            id=dialog.id, title=channel_details.title, about=full_channel_info.full_chat.about,
                            link=f"https://t.me/{channel_details.username}", members_count=participants_count,
                            parsing_time=parsing_time
                        )
                except TypeError:
                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def entering_data_for_parsing_active(self, page: ft.Page) -> None:
        """
        üìù –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:

            lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
            page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
            page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
            chat_input = ft.TextField(label="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö:",
                                      multiline=False, max_lines=1)
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            limit_active_user = ft.TextField(label="üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å:",
                                             multiline=False, max_lines=1)

            async def btn_click(_) -> None:
                """‚úÖ –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"""
                start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
                await log_and_display(f"‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start)}", lv, page)
                await log_and_display(
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_input.value}. üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {limit_active_user.value}", lv, page)
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
                await self.parse_active_users(chat_input.value, int(limit_active_user.value), lv, page)
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚è∞
                await log_and_display(
                    f"üîö –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start}", lv, page)
                page.go("/parsing")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ üè†
                page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π üîÑ

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.views.append(
                ft.View(
                    "/parsing",  # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    [
                        lv,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                        chat_input,  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç üîó
                        limit_active_user,  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π üí¨
                        ft.Column(),  # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                        ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=done_button,
                                          on_click=btn_click),  # –ö–Ω–æ–ø–∫–∞ "‚úÖ –ì–æ—Ç–æ–≤–æ"
                        ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=back_button,
                                          on_click=lambda _: self.back_button_clicked(page))  # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                    ]
                ))
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
# 690
