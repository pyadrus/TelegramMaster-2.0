# -*- coding: utf-8 -*-
import asyncio
import os
import os.path
import shutil
import time

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import functions
from telethon.errors import (AuthKeyUnregisteredError, ChannelPrivateError,
                             ChatAdminRequiredError, FloodWaitError,
                             UsernameInvalidError)
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import (ChannelParticipantsAdmins,
                               ChannelParticipantsSearch, InputPeerEmpty,
                               InputUser, UserProfilePhoto, UserStatusEmpty,
                               UserStatusLastMonth, UserStatusLastWeek,
                               UserStatusOffline, UserStatusOnline,
                               UserStatusRecently)
from telethon.tl.types import User

from src.core.configs import (BUTTON_HEIGHT, line_width_button,
                              path_accounts_folder, time_activity_user_2)
from src.core.sqlite_working_tools import (DatabaseHandler, GroupsAndChannels,
                                           MembersAdmin, MembersGroups, db, remove_duplicates)
from src.core.utils import find_filess
from src.features.account.TGConnect import TGConnect
from src.features.account.TGSubUnsub import SubscribeUnsubscribeTelegram
from src.gui.gui import end_time, list_view, log_and_display, start_time
from src.locales.translations_loader import translations


class ParsingGroupMembers:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç."""

    def __init__(self):
        self.db_handler = DatabaseHandler()
        self.tg_connect = TGConnect()
        self.tg_subscription_manager = SubscribeUnsubscribeTelegram()

    # async def clean_parsing_list_and_remove_duplicates(self):
    #     """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""

    # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # await self.db_handler.remove_records_without_username(page)

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    # remove_duplicate_ids()

    async def obtaining_administrators(self, session_files, page: ft.Page):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –≥—Ä—É–ø–ø—ã, –≤–∫–ª—é—á–∞—è –∏—Ö –±–∏–æ–≥—Ä–∞—Ñ–∏—é, —Å—Ç–∞—Ç—É—Å, —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.
        """
        try:
            for session_path in session_files:
                session_name = os.path.basename(session_path)
                try:
                    client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                       account_directory=path_accounts_folder)
                    for groups in await self.db_handler.open_and_read_data(table_name="writing_group_links",
                                                                           page=page):
                        await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups[0]}", page)
                        try:
                            entity = await client.get_entity(groups[0])  # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π
                            if hasattr(entity, 'megagroup') and entity.megagroup:
                                # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                                async for user in client.iter_participants(entity, filter=ChannelParticipantsAdmins):
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                                    admin_name = (user.first_name or "").strip()
                                    if user.last_name:
                                        admin_name += f" {user.last_name}"
                                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                                    full_user = await client(GetFullUserRequest(id=user.id))
                                    bio = full_user.full_user.about or ""
                                    user_status = "Admin"
                                    log_data = {
                                        "username": await self.get_username(user), "user_id": user.id,
                                        "access_hash": user.access_hash, "first_name": await self.get_first_name(user),
                                        "last_name": await self.get_last_name(user),
                                        "phone": await self.get_user_phone(user),
                                        "online_at": await self.get_user_online_status(user),
                                        "photo_status": await self.get_photo_status(user),
                                        "premium_status": await self.get_user_premium_status(user),
                                        "user_status": user_status,
                                        "bio": bio or "", "group": groups[0]
                                    }
                                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
                                    await asyncio.sleep(0.5)
                                    await log_and_display(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {log_data}", page)
                                    with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                                        MembersAdmin.create(
                                            username=log_data['username'], user_id=log_data['user_id'],
                                            access_hash=log_data['access_hash'], first_name=log_data['first_name'],
                                            last_name=log_data['last_name'], phone=log_data['phone'],
                                            online_at=log_data['online_at'], photo_status=log_data['photo_status'],
                                            premium_status=log_data['premium_status'],
                                            user_status=log_data['user_status'],
                                            bio=log_data['bio'], group_name=log_data['group'],
                                        )
                                # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                                await self.db_handler.delete_row_db(table="writing_group_links",
                                                                    column="writing_group_links", value=groups)
                            else:
                                try:
                                    await log_and_display(f"–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –∞ –∫–∞–Ω–∞–ª: {entity.title}", page)
                                    # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                                    await self.db_handler.delete_row_db(table="writing_group_links",
                                                                        column="writing_group_links", value=groups)
                                except AttributeError:
                                    await log_and_display(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã {groups[0]}",
                                                          page)
                                    # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                                    await self.db_handler.delete_row_db(table="writing_group_links",
                                                                        column="writing_group_links", value=groups)
                        except UsernameInvalidError:
                            await log_and_display(translations["ru"]["errors"]["group_entity_error"], page)
                            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                            await self.db_handler.delete_row_db(table="writing_group_links",
                                                                column="writing_group_links", value=groups)
                        except ValueError:
                            await log_and_display(translations["ru"]["errors"]["group_entity_error"], page)
                            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                            await self.db_handler.delete_row_db(table="writing_group_links",
                                                                column="writing_group_links", value=groups)
                    await client.disconnect()
                except FloodWaitError as e:
                    await log_and_display(f"{translations["ru"]["errors"]["flood_wait"]}{e}", page, level="error")
                    await client.disconnect()
        except Exception as error:
            logger.exception(error)

    async def parse_groups(self, page: ft.Page) -> None:
        """
        üîç –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø Telegram –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ GUI.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """

        selected_sessions = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö session —Ñ–∞–π–ª–æ–≤

        admin_switch = ft.CupertinoSwitch(
            label="–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", value=False,
            tooltip="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø."
        )
        account_groups_switch = ft.CupertinoSwitch(
            label="–ü–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç", value=False,
            tooltip="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç."
        )
        members_switch = ft.CupertinoSwitch(
            label="–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=False,
            tooltip="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ, –ø–∞—Ä—Å—è—Ç—Å—è –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø."
        )

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
        chat_input = ft.TextField(label="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∏.",
                                  multiline=False, max_lines=1)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        def toggle_admin_switch(_):
            if admin_switch.value:
                account_groups_switch.value = False
                members_switch.value = False
            page.update()

        def toggle_account_groups_switch(_):
            if account_groups_switch.value:
                admin_switch.value = False
                members_switch.value = False
            page.update()

        def toggle_members_switch(_):
            if members_switch.value:
                admin_switch.value = False
                account_groups_switch.value = False
            page.update()

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        admin_switch.on_change = toggle_admin_switch
        account_groups_switch.on_change = toggle_account_groups_switch
        members_switch.on_change = toggle_members_switch

        page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        selected_files = ft.Text(value="Session —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", size=12)

        async def add_items(_):
            """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""

            data = chat_input.value.split()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –û—Ç–ª–∞–¥–∫–∞
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            unique_records = list(set(data))
            await self.db_handler.write_to_single_column_table(
                name_database="writing_group_links",
                database_columns="writing_group_links",
                into_columns="writing_group_links",
                recorded_data=unique_records
            )

            if not selected_sessions:
                await log_and_display("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ session —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏.", page)
                session_files = await find_filess(directory_path=path_accounts_folder, extension='session')
                if not session_files:
                    await log_and_display("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç session —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.", page)
                    page.update()
                    return
            else:
                session_files = selected_sessions
                logger.debug(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join([os.path.basename(s) for s in selected_sessions])}")
                await log_and_display(
                    f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {', '.join([os.path.basename(s) for s in selected_sessions])}",
                    page)

            start = await start_time(page)
            page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ
            try:
                if account_groups_switch.value:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ üìÇ
                    for session_path in session_files:
                        session_name = os.path.basename(session_path)
                        logger.debug(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç: {session_name}")
                        client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                           account_directory=path_accounts_folder)
                        await log_and_display(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {session_name}", page)
                        await log_and_display(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç", page)
                        await self.forming_a_list_of_groups(client, page)
                        remove_duplicates()  # –ß–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üßπ (—Ç–∞–±–ª–∏—Ü–∞ groups_and_channels, –∫–æ–ª–æ–Ω–∫–∞ id)

                if admin_switch.value:
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üë§
                    await self.obtaining_administrators(session_files, page)

                if members_switch.value:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ üìÇ
                    for session_path in session_files:
                        session_name = os.path.basename(session_path)
                        client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                           account_directory=path_accounts_folder)
                        for groups in await self.db_handler.open_and_read_data(table_name="writing_group_links",
                                                                               page=page):
                            await log_and_display(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups[0]}", page)
                            # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É
                            await self.tg_subscription_manager.subscribe_to_group_or_channel(client, groups[0], page)
                            await self.parse_group(client, groups[0], page)  # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
                            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üóëÔ∏è
                            await self.db_handler.delete_row_db(table="writing_group_links",
                                                                column="writing_group_links", value=groups)
                            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ üîå
                        await client.disconnect()
                        await log_and_display(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}", page)
                await end_time(start, page)
            except Exception as error:
                logger.exception(error)

        async def btn_click(e: ft.FilePickerResultEvent) -> None:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
            if e.files:
                selected_sessions.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                for file in e.files:
                    file_name = file.name  # –ò–º—è —Ñ–∞–π–ª–∞
                    file_path = file.path  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ ".session"
                    if file_name.endswith(".session"):
                        target_folder = path_accounts_folder
                        target_path = os.path.join(target_folder, file_name)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ
                        if not os.path.exists(target_path) or file_path != os.path.abspath(target_path):
                            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            os.makedirs(target_folder, exist_ok=True)
                            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                            shutil.copy(file_path, target_path)
                        selected_sessions.append(target_path)  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å
                    else:
                        selected_files.value = f"–§–∞–π–ª {file_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è session —Ñ–∞–π–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ .session —Ñ–∞–π–ª—ã."
                        selected_files.update()
                        return

                selected_files.value = f"–í—ã–±—Ä–∞–Ω—ã session —Ñ–∞–π–ª—ã: {', '.join([os.path.basename(s) for s in selected_sessions])}"
                session_name = os.path.splitext(os.path.basename(selected_files.value))[0]
                logger.debug(f"–í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: {session_name}")
                selected_files.update()
            else:
                selected_files.value = "–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω"
                selected_files.update()

            page.update()

        pick_files_dialog = ft.FilePicker(on_result=btn_click)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ {pick_files_dialog}")
        page.overlay.append(pick_files_dialog)  # –î–æ–±–∞–≤–ª—è–µ–º FilePicker –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        button_select_file = ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                               text=translations["ru"]["create_groups_menu"]["choose_session_files"],
                                               on_click=lambda _: pick_files_dialog.pick_files(allow_multiple=True)
                                               # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                                               )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.views.append(
            ft.View("/parsing", [
                list_view,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                ft.Column([admin_switch, account_groups_switch, members_switch, chat_input]),
                # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ft.Column(),  # —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                selected_files,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                button_select_file,  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                  text=translations["ru"]["buttons"]["start"], on_click=add_items),
                ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                  text=translations["ru"]["buttons"]["back"], on_click=lambda _: page.go("parsing"))
            ], ))
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ

    async def parse_group(self, client, groups_wr, page) -> None:
        """
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ê—Ä–≥—É–º–µ–Ω—Ç phone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        @handle_exceptions –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö user_data/software_database.db.

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param groups_wr: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        await log_and_display("üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...", page)

        try:

            all_participants: list = []
            while_condition = True
            # my_filter = ChannelParticipantsSearch("")
            offset = 0
            while while_condition:
                try:
                    participants = await client(
                        GetParticipantsRequest(channel=groups_wr, offset=offset, filter=ChannelParticipantsSearch(""),
                                               limit=200,
                                               hash=0))
                    all_participants.extend(participants.users)
                    offset += len(participants.users)
                    if len(participants.users) < 1:
                        while_condition = False
                except TypeError:
                    await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: {groups_wr} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º.", page,
                                          level="error")
                    await asyncio.sleep(2)
                    break
                except ChatAdminRequiredError:
                    await log_and_display(translations["ru"]["errors"]["admin_rights_required"], page)
                    await asyncio.sleep(2)
                    break
                except ChannelPrivateError:
                    await log_and_display(translations["ru"]["errors"]["channel_private"], page)
                    await asyncio.sleep(2)
                    break
                except AuthKeyUnregisteredError:
                    await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], page)
                    await asyncio.sleep(2)
                    break

            # entities: list = [] # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for user in all_participants:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # username, user_phone, first_name, last_name, await self.get_photo_status(user), online_at, user_premium = await self.receiving_data(user)
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
                # entities.append([username, user.id, user.access_hash, first_name, last_name, user_phone, online_at, await self.get_photo_status(user), user_premium])
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                # list_view.controls.append(ft.Text(f"{username}, {user.id}, {user.access_hash}, {first_name}, {last_name}, {user_phone}, {online_at}, {await self.get_photo_status(user)}, {user_premium}"))
                # page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

                await log_and_display(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user}", page)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user}")
                # online_at = await self.get_user_online_status(user)
                # user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                log_data = {
                    "username": await self.get_username(user), "user_id": user.id,
                    "access_hash": user.access_hash, "first_name": await self.get_first_name(user),
                    "last_name": await self.get_last_name(user), "user_phone": await self.get_user_phone(user),
                    "online_at": await self.get_user_online_status(user),
                    "photos_id": await self.get_photo_status(user),
                    "user_premium": await self.get_user_premium_status(user),
                }
                db.create_tables([MembersGroups])
                with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                    MembersGroups.get_or_create(
                        user_id=log_data["user_id"],
                        defaults={
                            "username": log_data["username"],
                            "access_hash": log_data["access_hash"],
                            "first_name": log_data["first_name"],
                            "last_name": log_data["last_name"],
                            "user_phone": log_data["user_phone"],
                            "online_at": log_data["online_at"],
                            "photos_id": log_data["photos_id"],
                            "user_premium": log_data["user_premium"],
                        }
                    )
        except TypeError as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        except Exception as error:
            logger.exception(error)

    @staticmethod
    async def get_last_name(user: User) -> str:
        return user.last_name or ""

    @staticmethod
    async def get_first_name(user: User) -> str:
        return user.first_name or ""

    @staticmethod
    async def get_username(user: User) -> str:
        return user.username or ""

    @staticmethod
    async def get_user_phone(user: User) -> str:
        return user.phone if getattr(user, "phone", None) else "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç"

    @staticmethod
    async def get_user_premium_status(user: User) -> str:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if getattr(user, "premium", False) else "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    @staticmethod
    async def get_photo_status(user: User) -> str:
        return "–° —Ñ–æ—Ç–æ" if isinstance(user.photo, UserProfilePhoto) else "–ë–µ–∑ —Ñ–æ—Ç–æ"

    @staticmethod
    async def get_user_online_status(user):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
        https://core.telegram.org/type/UserStatus
        :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telethon
        :return: –°—Ç—Ä–æ–∫–∞ –∏–ª–∏ datetime, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω–∞
        """
        online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if user.status:
            if isinstance(user.status, UserStatusOffline):
                online_at = user.status.was_online
            elif isinstance(user.status, UserStatusRecently):
                online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"
            elif isinstance(user.status, UserStatusLastWeek):
                online_at = "–ë—ã–ª(–∞) –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
            elif isinstance(user.status, UserStatusLastMonth):
                online_at = "–ë—ã–ª(–∞) –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
            elif isinstance(user.status, UserStatusOnline):
                online_at = user.status.expires
            elif isinstance(user.status, UserStatusEmpty):
                online_at = "–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        return online_at

    async def parse_active_users(self, chat_input, limit_active_user, page) -> None:
        """
        Parsing —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤ —á–∞—Ç (–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

        :param chat_input: –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            for session_name in await find_filess(directory_path=path_accounts_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                   account_directory=path_accounts_folder)
                await self.tg_subscription_manager.subscribe_to_group_or_channel(client, chat_input, page)
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ time_activity_user_2 –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–µ—Å–ª–∏ –æ–Ω–æ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
                    await asyncio.sleep(
                        int(time_activity_user_2 or 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –µ—Å–ª–∏ None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
                except TypeError:
                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, time_activity_user_2 –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø),
                    # —Ç–æ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 5 —Å–µ–∫—É–Ω–¥.
                    await asyncio.sleep(5)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –µ—Å–ª–∏ None –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
                await self.get_active_users(client, chat_input, limit_active_user, page)
                await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
        except Exception as error:
            logger.exception(error)

    async def get_active_users(self, client, chat, limit_active_user, page) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param chat: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            async for message in client.iter_messages(chat, limit=int(limit_active_user)):
                if message.from_id is not None:
                    try:
                        await log_and_display(f"{message.from_id}", page)
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = await client.get_entity(message.from_id.user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
                        from_user = InputUser(user_id=user.id, access_hash=user.access_hash)  # –°–æ–∑–¥–∞–µ–º InputUser
                        await log_and_display(f"{from_user}", page)
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        entities = await self.get_active_user_data(user)
                        await log_and_display(f"{entities}", page)
                        await self.db_handler.write_parsed_chat_participants_to_db_active(entities)
                    except ValueError as e:
                        await log_and_display(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_id.user_id}: {e}",
                            page)
                else:
                    await log_and_display(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ from_id.", page)
        except Exception as error:
            logger.exception(error)

    @staticmethod
    async def filtering_groups(chats):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø.

        :param chats: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.
        :return: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        """
        groups = []
        for chat in chats:
            try:
                if chat.megagroup:
                    groups.append(chat)
            except AttributeError:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ megagroup
        return groups

    @staticmethod
    async def name_of_the_groups(groups):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.

        :param groups: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.
        :return: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø.
        """
        group_names = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
        for group in groups:
            group_names.append(group.title)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫
        return group_names

    async def choose_and_parse_group(self, page: ft.Page) -> None:
        """
        üìå –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :return: None
        """
        page.controls.append(list_view)
        try:
            for session_name in await find_filess(directory_path=path_accounts_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(page, session_name,
                                                                   account_directory=path_accounts_folder)
                chats = []
                last_date = None
                result = await client(
                    GetDialogsRequest(offset_date=last_date, offset_id=0, offset_peer=InputPeerEmpty(), limit=200,
                                      hash=0))
                chats.extend(result.chats)
                groups = await self.filtering_groups(chats)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                group_titles = await self.name_of_the_groups(groups)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
                await log_and_display(f"{group_titles}", page)
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_text = ft.Text(value="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")

                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
                async def handle_button_click(_) -> None:
                    start = await start_time(page)
                    await log_and_display(f"üìÇ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {dropdown.value}", page)
                    await self.parse_group(client, dropdown.value, page)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                    await client.disconnect()
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
                    await end_time(start, page)
                    page.go("/parsing")

                # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
                dropdown = ft.Dropdown(width=line_width_button,
                                       options=[ft.DropdownOption(title) for title in group_titles], autofocus=True)
                page.views.append(
                    ft.View(
                        "/parsing",
                        [
                            ft.Column(controls=[dropdown,
                                                ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                                                  text="üìÇ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
                                                                  on_click=handle_button_click),
                                                ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                                                  text=translations["ru"]["buttons"]["back"],
                                                                  on_click=lambda _: page.go("parsing")),
                                                result_text, list_view,
                                                ])], ))
                page.update()
        except Exception as error:
            logger.exception(error)

    # @staticmethod
    # async def parse_users(client, target_group, page: ft.Page):
    #     """
    #     üßë‚Äçü§ù‚Äçüßë –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞.
    #     –ú–µ—Ç–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ, —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª–µ.
    #
    #     :param client: –ö–ª–∏–µ–Ω—Ç Telegram.
    #     :param target_group: –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã.
    #     :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    #     :return: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     """
    #     try:
    #         await log_and_display("üîç –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...", page)
    #
    #         all_participants: list = []
    #         while_condition = True
    #         my_filter = ChannelParticipantsSearch("")
    #         offset = 0
    #         while while_condition:
    #             try:
    #                 participants = await client(
    #                     GetParticipantsRequest(channel=target_group, offset=offset, filter=my_filter, limit=200,
    #                                            hash=0))
    #                 all_participants.extend(participants.users)
    #                 offset += len(participants.users)
    #                 if len(participants.users) < 1:
    #                     while_condition = False
    #             except TypeError:
    #                 await log_and_display(f"‚ùå –û—à–∏–±–∫–∞: {target_group} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º.", page,
    #                                       level="error")
    #                 await asyncio.sleep(2)
    #                 break
    #             except ChatAdminRequiredError:
    #                 await log_and_display(translations["ru"]["errors"]["admin_rights_required"], page)
    #                 await asyncio.sleep(2)
    #                 break
    #             except ChannelPrivateError:
    #                 await log_and_display(translations["ru"]["errors"]["channel_private"], page)
    #                 await asyncio.sleep(2)
    #                 break
    #             except AuthKeyUnregisteredError:
    #                 await log_and_display(translations["ru"]["errors"]["auth_key_unregistered"], page)
    #                 await asyncio.sleep(2)
    #                 break
    #
    #         return all_participants
    #     except Exception as error:
    #         logger.exception(error)
    #         raise

    # async def get_all_participants(self, all_participants, page: ft.Page) -> list:
    #     """
    #     –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     –ú–µ—Ç–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π.
    #
    #     :param all_participants: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    #     :return: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    #     """
    #     try:
    #         entities: list = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    #         for user in all_participants:
    #             await self.get_user_data(user, entities, page)
    #         return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    #     except TypeError as error:
    #         logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    #         return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    #     except Exception as error:
    #         logger.exception(error)
    #         return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    async def get_active_user_data(self, user):
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            entity = (
                await self.get_username(user), user.id, user.access_hash, await self.get_first_name(user),
                await self.get_last_name(user), await self.get_user_phone(user),
                await self.get_user_online_status(user), await self.get_photo_status(user),
                await self.get_user_premium_status(user))
            return entity
        except Exception as error:
            logger.exception(error)
            raise

    @staticmethod
    async def forming_a_list_of_groups(client, page: ft.Page) -> None:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤.

        –ú–µ—Ç–æ–¥ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö, –≤–∫–ª—é—á–∞—è –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        :param client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telegram.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            async for dialog in client.iter_dialogs():
                try:
                    entity = await client.get_entity(dialog.id)
                    full_channel_info = await client(functions.channels.GetFullChannelRequest(channel=entity))
                    channel_details = await client.get_entity(full_channel_info.full_chat)
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants_count = getattr(full_channel_info.full_chat, 'participants_count', 0)
                    # –í—Ä–µ–º—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    await log_and_display(
                        f"{dialog.id}, {channel_details.title}, https://t.me/{channel_details.username}, {participants_count}",
                        page)
                    with db.atomic():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                        GroupsAndChannels.create(
                            id=dialog.id, title=channel_details.title, about=full_channel_info.full_chat.about,
                            link=f"https://t.me/{channel_details.username}", members_count=participants_count,
                            parsing_time=time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                        )
                except TypeError:
                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        except Exception as error:
            logger.exception(error)

    async def entering_data_for_parsing_active(self, page: ft.Page) -> None:
        """
        üìù –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:

            page.controls.append(list_view)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
            page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
            chat_input = ft.TextField(label="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö:",
                                      multiline=False, max_lines=1)
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            limit_active_user = ft.TextField(label="üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å:",
                                             multiline=False, max_lines=1)

            async def btn_click(_) -> None:
                """‚úÖ –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"""
                start = await start_time(page)
                await log_and_display(
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_input.value}. üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {limit_active_user.value}",
                    page)
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
                await self.parse_active_users(chat_input.value, int(limit_active_user.value), page)
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                await end_time(start, page)
                page.go("/parsing")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ üè†
                page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π üîÑ

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.views.append(
                ft.View(
                    "/parsing",  # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    [
                        list_view,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                        chat_input,  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç üîó
                        limit_active_user,  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π üí¨
                        ft.Column(),  # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                        ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                          text=translations["ru"]["buttons"]["done"],
                                          on_click=btn_click),  # –ö–Ω–æ–ø–∫–∞ "‚úÖ –ì–æ—Ç–æ–≤–æ"
                        ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                          text=translations["ru"]["buttons"]["back"],
                                          on_click=lambda _: page.go("parsing"))  # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                    ]
                ))
        except Exception as error:
            logger.exception(error)
# 690
