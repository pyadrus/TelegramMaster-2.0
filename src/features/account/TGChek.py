# -*- coding: utf-8 -*-
import datetime

import flet as ft

from src.core.configs import BUTTON_WIDTH, BUTTON_HEIGHT, path_accounts_folder
from src.core.localization import (main_menu, checking_accounts, checking_through_a_spam_bot_ru, validation_check_ru,
                                   renaming_accounts_ru, full_verification_ru)
from src.core.utils import find_folders
from src.features.account.TGConnect import TGConnect
from src.gui.menu import show_notification, log_and_display
from loguru import logger


class TGChek:

    def __init__(self):
        self.TGConnect = TGConnect()

    async def account_verification_menu(self, page: ft.Page):
        """
        –ú–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        list_view = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)

        async def validation_check(_) -> None:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
            try:
                start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
                await log_and_display(f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}", list_view,
                                      page)
                for folder in await find_folders(directory_path=path_accounts_folder, list_view=list_view, page=page):
                    await log_and_display(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ üìÅ {folder} –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å", list_view, page)
                    await self.TGConnect.verify_all_accounts(page=page, list_view=list_view)
                await log_and_display(f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}", list_view,
                                      page)
                finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
                await log_and_display(
                    f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                    list_view,
                    page)
                await show_notification(page, "üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

        async def renaming_accounts(_):
            """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
            try:
                start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
                await log_and_display(f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}", list_view,
                                      page)
                for folder in await find_folders(directory_path=path_accounts_folder, list_view=list_view, page=page):
                    await log_and_display(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ üìÅ {folder}", list_view, page)
                    if folder == "invalid_account":
                        continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ–ø—É—Å–∫–∞—è —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é
                    else:
                        await self.TGConnect.get_account_details(page=page, folder_name=folder, list_view=list_view)
                finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
                await log_and_display(
                    f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                    list_view,
                    page)
                await show_notification(page, "üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

        async def checking_for_spam_bots(_):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–æ—Ç–æ–≤"""
            start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}", list_view,
                                  page)
            for folder in await find_folders(directory_path=path_accounts_folder, list_view=list_view, page=page):
                await log_and_display(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ üìÅ {folder} —á–µ—Ä–µ–∑ —Å–ø–∞–º –±–æ—Ç", list_view, page)
                if folder == "invalid_account":
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ–ø—É—Å–∫–∞—è —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é
                else:
                    await self.TGConnect.check_for_spam(page=page, list_view=list_view)
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(
                f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}", list_view,
                page)
            await show_notification(page, "üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        async def full_verification(_):
            """
            –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            """
            start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}", list_view,
                                  page)
            await validation_check(_)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            await renaming_accounts(_)  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            await checking_for_spam_bots(_)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–æ—Ç–æ–≤
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(
                f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}", list_view,
                page)
            await show_notification(page, "üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        page.views.append(
            ft.View("/account_verification_menu",
                    [ft.AppBar(title=ft.Text(main_menu),
                               bgcolor=ft.colors.SURFACE_VARIANT),
                     ft.Text(spans=[ft.TextSpan(
                         checking_accounts,
                         ft.TextStyle(
                             size=20,
                             weight=ft.FontWeight.BOLD,
                             foreground=ft.Paint(
                                 gradient=ft.PaintLinearGradient((0, 20), (150, 20), [ft.colors.PINK,
                                                                                      ft.colors.PURPLE])), ), ), ], ),
                     list_view,
                     ft.Column([  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (page) –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫.
                         # ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–ø–∞–º –±–æ—Ç
                         ft.ElevatedButton(width=BUTTON_WIDTH, height=BUTTON_HEIGHT,
                                           text=checking_through_a_spam_bot_ru,
                                           on_click=checking_for_spam_bots),
                         # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                         ft.ElevatedButton(width=BUTTON_WIDTH, height=BUTTON_HEIGHT, text=validation_check_ru,
                                           on_click=validation_check),
                         # ‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                         ft.ElevatedButton(width=BUTTON_WIDTH, height=BUTTON_HEIGHT, text=renaming_accounts_ru,
                                           on_click=renaming_accounts),
                         # üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                         ft.ElevatedButton(width=BUTTON_WIDTH, height=BUTTON_HEIGHT, text=full_verification_ru,
                                           on_click=full_verification),

                     ])]))
