# -*- coding: utf-8 -*-
import asyncio
import datetime
import os
import os.path
import shutil
import sqlite3

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import TelegramClient
from telethon.errors import (AuthKeyDuplicatedError, PhoneNumberBannedError, UserDeactivatedBanError, TimedOutError,
                             AuthKeyNotFound, TypeNotFoundError, AuthKeyUnregisteredError, SessionPasswordNeededError,
                             ApiIdInvalidError, YouBlockedUserError, PasswordHashInvalidError)
from thefuzz import fuzz

from src.core.configs import ConfigReader, BUTTON_HEIGHT, line_width_button, path_accounts_folder
from src.core.localization import back_button, done_button
from src.core.sqlite_working_tools import DatabaseHandler
from src.core.utils import working_with_accounts, find_filess
from src.features.auth.logging_in import getting_phone_number_data_by_phone_number
from src.features.proxy.checking_proxy import checking_the_proxy_for_work
from src.features.proxy.checking_proxy import reading_proxy_data_from_the_database
from src.gui.menu import show_notification, log_and_display


class TGConnect:

    def __init__(self):
        self.db_handler = DatabaseHandler()
        self.config_reader = ConfigReader()
        self.api_id_api_hash = self.config_reader.get_api_id_data_api_hash_data()
        self.api_id = self.api_id_api_hash[0]
        self.api_hash = self.api_id_api_hash[1]

    async def verify_account(self, page: ft.Page, session_name, list_view) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã.

        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        """
        try:
            await log_and_display(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}", list_view, page)
            telegram_client = await self.get_telegram_client(page, session_name, path_accounts_folder, list_view)
            try:
                await telegram_client.connect()  # –ü–æ–¥—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
                if not await telegram_client.is_user_authorized():  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω
                    await telegram_client.disconnect()
                    await asyncio.sleep(5)
                    working_with_accounts(f"user_data/accounts/{session_name}.session",
                                          f"user_data/accounts/banned/{session_name}.session")
                else:
                    await log_and_display(f"–ê–∫–∫–∞—É–Ω—Ç {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", list_view, page)
                    await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            except (PhoneNumberBannedError, UserDeactivatedBanError, AuthKeyNotFound,
                    AuthKeyUnregisteredError, AuthKeyDuplicatedError) as e:
                await self.handle_banned_account(telegram_client, session_name, e, list_view, page)
            except TimedOutError as error:
                await log_and_display(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {error}", list_view, page)
                await asyncio.sleep(2)
            except sqlite3.OperationalError:
                await telegram_client.disconnect()
                working_with_accounts(f"user_data/accounts/{session_name}.session",
                                      f"user_data/accounts/banned/{session_name}.session")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def handle_banned_account(telegram_client, session_name, exception, list_view: ft.ListView, page: ft.Page):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ banned –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        telegram_client.disconnect() - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram.
        working_with_accounts() - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É - account_folder. –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ,
        –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª - new_account_folder

        :param telegram_client: TelegramClient
        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        :param exception: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            await log_and_display(message=f"‚õî –ê–∫–∫–∞—É–Ω—Ç banned: {session_name}. {str(exception)}", list_view=list_view,
                                  page=page)
            await telegram_client.disconnect()
            working_with_accounts(f"user_data/accounts/{session_name}.session",
                                  f"user_data/accounts/banned/{session_name}.session")
        except sqlite3.OperationalError:
            await telegram_client.disconnect()
            working_with_accounts(f"user_data/accounts/{session_name}.session",
                                  f"user_data/accounts/banned/{session_name}.session")

    async def check_for_spam(self, page: ft.Page, list_view: ft.ListView) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–ø–∞–º —á–µ—Ä–µ–∑ @SpamBot

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        """
        try:
            start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(message=f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}",
                                  list_view=list_view, page=page)
            for session_name in await find_filess(directory_path=path_accounts_folder, extension='session'):
                telegram_client: TelegramClient = await self.get_telegram_client(page=page, session_name=session_name,
                                                                                 account_directory=path_accounts_folder,
                                                                                 list_view=list_view)
                try:
                    await telegram_client.send_message(entity='SpamBot',
                                                       message='/start')  # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∞–º –±–æ—Ç, –∏ –≤–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É /start
                    for message in await telegram_client.get_messages('SpamBot'):
                        await log_and_display(message=f"{session_name} {message.message}", list_view=list_view,
                                              page=page)
                        similarity_ratio_ru: int = fuzz.ratio(f"{message.message}",
                                                              "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã —Å —ç—Ç–∏–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
                                                              "–∏–Ω–æ–≥–¥–∞ –Ω–∞—à–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º–∞ –∏–∑–ª–∏—à–Ω–µ —Å—É—Ä–æ–≤–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "
                                                              "–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "
                                                              "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞—à–∏–º "
                                                              "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ "
                                                              "–ø–∏—Å–∞—Ç—å —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –í–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, "
                                                              "–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã. "
                                                              "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –í–∞–º –ø–µ—Ä–≤—ã–º, –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, "
                                                              "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
                        if similarity_ratio_ru >= 97:
                            await log_and_display(message=f"‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", list_view=list_view, page=page)
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                            await log_and_display(
                                message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}",
                                list_view=list_view, page=page)
                            # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                            working_with_accounts(f"user_data/accounts/{session_name}.session",
                                                  f"user_data/accounts/banned/{session_name}.session")
                        similarity_ratio_en: int = fuzz.ratio(f"{message.message}",
                                                              "I‚Äôm very sorry that you had to contact me. Unfortunately, "
                                                              "some account_actions can trigger a harsh response from our "
                                                              "anti-spam systems. If you think your account was limited by "
                                                              "mistake, you can submit a complaint to our moderators. While "
                                                              "the account is limited, you will not be able to send messages "
                                                              "to people who do not have your number in their phone contacts "
                                                              "or add them to groups and channels. Of course, when people "
                                                              "contact you first, you can always reply to them.")
                        if similarity_ratio_en >= 97:
                            await log_and_display(message=f"‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", list_view=list_view, page=page)
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                            await log_and_display(
                                message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}",
                                list_view=list_view, page=page)
                            # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                            await log_and_display(message=f"{session_name}", list_view=list_view, page=page)
                            working_with_accounts(f"user_data/accounts/{session_name}.session",
                                                  f"user_data/accounts/banned/{session_name}.session")
                        await log_and_display(
                            message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}",
                            list_view=list_view, page=page)
                        try:
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                        except sqlite3.OperationalError as e:
                            await log_and_display(message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}",
                                                  list_view=list_view, page=page)
                            await self.handle_banned_account(telegram_client=telegram_client, session_name=session_name,
                                                             exception=e, list_view=list_view, page=page)

                except YouBlockedUserError:
                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                except (AttributeError, AuthKeyUnregisteredError) as e:
                    await log_and_display(message=f"‚ùå –û—à–∏–±–∫–∞: {e}", list_view=list_view, page=page)
                    continue
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(
                message=f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                list_view=list_view, page=page)
            await show_notification(page=page, message="üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def verify_all_accounts(self, page: ft.Page, list_view: ft.ListView) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã Telegram –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        try:
            start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(message=f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram üìÅ.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}",
                                  list_view=list_view, page=page)
            await checking_the_proxy_for_work(list_view=list_view, page=page)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            for session_file in await find_filess(directory_path=path_accounts_folder, extension='session'):
                await log_and_display(message=f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: {session_file}", list_view=list_view, page=page)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                await self.verify_account(page=page, session_name=session_file, list_view=list_view)
            await log_and_display(message=f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram üìÅ", list_view=list_view, page=page)
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(
                message=f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                list_view=list_view, page=page)
            await show_notification(page, "üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def get_account_details(self, page: ft.Page, list_view: ft.ListView):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –∞–∫–∫–∞—É–Ω—Ç–µ.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        try:
            start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(message=f"‚ñ∂Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–æ—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}",
                                  list_view=list_view, page=page)
            await checking_the_proxy_for_work(list_view=list_view, page=page)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            for session_name in await find_filess(directory_path=path_accounts_folder, extension='session'):
                await log_and_display(message=f"‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: {session_name}", list_view=list_view,
                                      page=page)
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                telegram_client = await self.get_telegram_client(page=page, session_name=session_name,
                                                                 account_directory=path_accounts_folder,
                                                                 list_view=list_view)
                try:
                    me = await telegram_client.get_me()
                    await self.rename_session_file(telegram_client=telegram_client, phone_old=session_name,
                                                   phone=me.phone, list_view=list_view, page=page)
                except AttributeError:  # –ï—Å–ª–∏ –≤ get_me –ø—Ä–∏—Ö–æ–¥–∏—Ç NoneType (None)
                    pass
                except TypeNotFoundError:
                    await telegram_client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                    await log_and_display(
                        message=f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç banned: {session_name}.session. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º IP",
                        list_view=list_view, page=page)
                    working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                          new_account_folder=f"user_data/accounts/banned/{session_name}.session")
                except AuthKeyUnregisteredError:
                    await telegram_client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                    await log_and_display(
                        message=f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç banned: {session_name}.session. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º IP",
                        list_view=list_view, page=page)
                    working_with_accounts(account_folder=f"user_data/accounts/{session_name}.session",
                                          new_account_folder=f"user_data/accounts/banned/{session_name}.session")
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(
                message=f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                list_view=list_view, page=page)
            await show_notification(page=page, message="üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def checking_all_accounts(self, page: ft.Page, list_view: ft.ListView) -> None:
        try:
            start_time = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(message=f"‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start_time)}",
                                  list_view=list_view, page=page)
            await self.verify_all_accounts(page=page, list_view=list_view)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            await self.get_account_details(page=page, list_view=list_view)  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            await self.check_for_spam(page=page, list_view=list_view)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–æ—Ç–æ–≤
            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            await log_and_display(
                message=f"üîö –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start_time}",
                list_view=list_view, page=page)
            await show_notification(page=page, message="üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def rename_session_file(telegram_client, phone_old, phone, list_view, page: ft.Page) -> None:
        """
        –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç session —Ñ–∞–π–ª—ã.

        :param telegram_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
        :param phone_old: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è session —Ñ–∞–π–ª–∞)
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ session —Ñ–∞–π–ª–∞
            os.rename(f"user_data/accounts/{phone_old}.session",
                      f"user_data/accounts/{phone}.session", )
        except FileExistsError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            os.remove(f"user_data/accounts/{phone_old}.session")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

        await getting_phone_number_data_by_phone_number(phone, list_view, page)  # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    async def get_telegram_client(self, page: ft.Page, session_name, account_directory, list_view):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–π–ª session.
        –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ file[0] - session —Ñ–∞–π–ª

        :param account_directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        :param session_name: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ (file[0] - session —Ñ–∞–π–ª)
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        :return TelegramClient: TelegramClient
        """
        await log_and_display(message=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {session_name}", list_view=list_view, page=page)
        telegram_client = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        try:
            telegram_client = TelegramClient(session=f"{account_directory}/{session_name}", api_id=self.api_id,
                                             api_hash=self.api_hash,
                                             system_version="4.16.30-vxCUSTOM",
                                             proxy=await reading_proxy_data_from_the_database(
                                                 db_handler=self.db_handler, list_view=list_view, page=page))
            await telegram_client.connect()
            return telegram_client
        except sqlite3.OperationalError:
            await log_and_display(message=f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {session_name} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.", list_view=list_view, page=page)
            return None
        except sqlite3.DatabaseError:
            await log_and_display(message=f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {session_name} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.", list_view=list_view, page=page)
            return None
        except AuthKeyDuplicatedError:
            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
            await log_and_display(message=f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {session_name} –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º ip", list_view=list_view,
                                  page=page)
            working_with_accounts(f"{account_directory}/{session_name}.session",
                                  f"user_data/accounts/banned/{session_name}.session")
            return None
        except AttributeError as error:
            await log_and_display(message=f"‚ùå –û—à–∏–±–∫–∞: {error}", list_view=list_view, page=page)
            return None
        except ValueError:
            await log_and_display(message=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É {session_name}.",
                                  list_view=list_view, page=page)
            return None
        except Exception as error:
            await telegram_client.disconnect()
            await log_and_display(message=f"‚ùå –û—à–∏–±–∫–∞: {error}", list_view=list_view, page=page)
            return None

    async def connecting_number_accounts(self, page: ft.Page, list_view):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
        –∫–æ–¥.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            phone_number = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", multiline=False, max_lines=1)

            async def btn_click(_) -> None:
                phone_number_value = phone_number.value
                await log_and_display(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number_value}", list_view, page)
                # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                telegram_client = TelegramClient(f"user_data/accounts/{phone_number_value}",
                                                 api_id=self.api_id,
                                                 api_hash=self.api_hash,
                                                 system_version="4.16.30-vxCUSTOM",
                                                 proxy=await reading_proxy_data_from_the_database(
                                                     db_handler=self.db_handler, list_view=list_view, page=page))
                await telegram_client.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
                if not await telegram_client.is_user_authorized():
                    await log_and_display(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", list_view, page)
                    await telegram_client.send_code_request(phone_number_value)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
                    await asyncio.sleep(2)
                    passww = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ telegram:", multiline=True, max_lines=1)

                    async def btn_click_code(_) -> None:
                        try:
                            await log_and_display(f"–ö–æ–¥ telegram: {passww.value}", list_view, page)
                            await telegram_client.sign_in(phone_number_value, passww.value)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º
                            telegram_client.disconnect()
                            page.go("/")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ 2FA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                            page.update()
                        except SessionPasswordNeededError:  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                            await log_and_display(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.",
                                                  list_view, page)
                            pass_2fa = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å telegram:", multiline=False, max_lines=1)

                            async def btn_click_password(_) -> None:
                                await log_and_display(f"–ü–∞—Ä–æ–ª—å telegram: {pass_2fa.value}", list_view, page)
                                try:
                                    await telegram_client.sign_in(password=pass_2fa.value)
                                    await log_and_display(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.", list_view, page)
                                    telegram_client.disconnect()
                                    page.go("/")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                    page.update()
                                except PasswordHashInvalidError:
                                    await log_and_display(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", list_view, page)
                                    await show_notification(page, f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                                    page.go("/")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                except Exception as ex:
                                    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {ex}")

                            button_password = ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT,
                                                                text=done_button,
                                                                on_click=btn_click_password)  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
                            page.views.append(ft.View(controls=[pass_2fa, button_password]))
                            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è
                        except ApiIdInvalidError:
                            await log_and_display(f"[!] –ù–µ–≤–µ—Ä–Ω—ã–µ API ID –∏–ª–∏ API Hash.", list_view, page)
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
                        except Exception as e:
                            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram

                    button_code = ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=done_button,
                                                    on_click=btn_click_code)  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
                    page.views.append(ft.View(controls=[passww, button_code]))
                    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                page.update()

            async def back_button_clicked(_):
                """
                –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                """
                page.go("/")

            input_view = ft.View(
                controls=[ft.Text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram", size=15, color="pink600"),
                          phone_number,
                          ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=done_button,
                                            on_click=btn_click),  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ",
                          ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=back_button,
                                            on_click=back_button_clicked)  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                          ])  # –°–æ–∑–¥–∞–µ–º –≤–∏–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É
            page.views.append(input_view)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.update()
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def connecting_session_accounts(page: ft.Page):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telegram

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            selected_files = ft.Text(value="Session —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", size=12)

            async def btn_click(e: ft.FilePickerResultEvent) -> None:
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
                if e.files:
                    file_name = e.files[0].name  # –ò–º—è —Ñ–∞–π–ª–∞
                    file_path = e.files[0].path  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ ".session"
                    if file_name.endswith(".session"):
                        selected_files.value = f"–í—ã–±—Ä–∞–Ω session —Ñ–∞–π–ª: {file_name}"
                        selected_files.update()
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        target_path = os.path.join(path_accounts_folder, file_name)
                        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        os.makedirs(path_accounts_folder, exist_ok=True)
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        shutil.copy(file_path, target_path)
                        selected_files.value = f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: {target_path}"
                    else:
                        selected_files.value = "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è session —Ñ–∞–π–ª–æ–º"
                else:
                    selected_files.value = "–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω"
                selected_files.update()
                page.update()

            async def back_button_clicked(_):
                """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
                page.go("/")

            pick_files_dialog = ft.FilePicker(on_result=btn_click)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
            page.overlay.append(pick_files_dialog)  # –î–æ–±–∞–≤–ª—è–µ–º FilePicker –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            input_view = ft.View(
                controls=[
                    ft.Text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram.\n\n –í—ã–±–µ—Ä–∏—Ç–µ session —Ñ–∞–π–ª\n", size=15),
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    selected_files,  # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text="–í—ã–±—Ä–∞—Ç—å session —Ñ–∞–π–ª",
                                      on_click=lambda _: pick_files_dialog.pick_files()),  # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                    ft.ElevatedButton(width=line_width_button, height=BUTTON_HEIGHT, text=back_button,
                                      on_click=back_button_clicked)  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                ]
            )
            page.views.append(input_view)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.update()

        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
