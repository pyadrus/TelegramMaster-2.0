import datetime
import json
from urllib.request import urlopen  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å urllib2 –Ω–∞ urllib.request

import flet as ft
import phonenumbers
import requests
from phonenumbers import carrier, geocoder
from telethon import TelegramClient
from telethon.errors import FilePartsInvalidError

from src.core.configs import program_version, date_of_program_change, program_name
from src.gui.gui import log_and_display


async def getting_phone_number_data_by_phone_number(phone_numbers, page: ft.Page):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    :param phone_numbers: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞
    :return: None
    """

    # –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    number = phonenumbers.parse(f"+{phone_numbers}", None)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    country_name = geocoder.description_for_number(number, "ru")
    operator_name = carrier.name_for_number(number, "ru")

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await log_and_display(f"–ù–æ–º–µ—Ä: {phone_numbers}, –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator_name}, –°—Ç—Ä–∞–Ω–∞: {country_name}", page)


def get_country_flag(ip_address):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ip –∞–¥—Ä–µ—Å—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞ https://ipwhois.io/ru/documentation.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.
    :param ip_address: IP –∞–¥—Ä–µ—Å
    :return: —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    """
    try:
        ipwhois = json.load(urlopen(f'https://ipwho.is/{ip_address}'))
        return ipwhois['flag']['emoji'], ipwhois['country']
    except KeyError:
        return "üè≥Ô∏è", "üåç"


def get_external_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ ip –∞–¥—Ä–µ—Å–∞"""
    try:
        response = requests.get('https://httpbin.org/ip')
        response.raise_for_status()
        return response.json().get("origin")
    except requests.RequestException as _:
        return None


async def loging(page: ft.Page):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramMaster 2.0
    """
    local_ip = get_external_ip()
    emoji, country = get_country_flag(local_ip)
    client = TelegramClient('src/features/auth/log',
                            api_id=7655060,
                            api_hash="cc1290cd733c1f1d407598e5a31be4a8")
    await client.connect()
    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üöÄ **Launch Information**\n\n"

        f"Program name: `{program_name}`\n"
        f"üåç IP Address: `{local_ip}`\n"
        f"üìç Location: {country} {emoji}\n"
        f"üïí Date: `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`\n"
        f"üîß Program Version: `{program_version}`\n"
        f"üìÖ Date of Change: `{date_of_program_change}`"
    )
    try:
        await client.send_file(535185511, 'user_data/log/log_ERROR.log', caption=message)
        client.disconnect()
    except FilePartsInvalidError as error:
        await log_and_display(f"{error}", page)
        client.disconnect()


if __name__ == "__main__":
    get_external_ip()
