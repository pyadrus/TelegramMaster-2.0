# -*- coding: utf-8 -*-
import asyncio
import json
import os
import os.path
import random  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å random, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ

from loguru import logger

from src.core.sqlite_working_tools import DatabaseHandler
from src.gui.menu import log_and_display


def read_json_file(filename):
    """
    –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ JSON.

    :param filename: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON.
    :return:         –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ JSON –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    with open(filename, 'r', encoding="utf-8") as file:
        data = json.load(file)
    return data


def all_find_files(directory_path) -> list:
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    :param directory_path:  –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :return list:           –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    entities = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for x in os.listdir(directory_path):
        if os.path.isfile(os.path.join(directory_path, x)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ x —Ñ–∞–π–ª–æ–º
            entities.append(x)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
    return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤


async def find_filess(directory_path, extension, list_view, page):
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ –±–µ–∑ —Ç–æ—á–∫–∏.

    :param directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–µ–∑ —Ç–æ—á–∫–∏)
    :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    :return list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    entities = []  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ user_data/accounts
    try:
        for x in os.listdir(directory_path):
            if x.endswith(f".{extension}"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                file = os.path.splitext(x)[0]  # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                entities.append(file)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        await log_and_display(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {entities}", list_view, page)
        return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ json —Ñ–∞–π–ª–æ–≤
    except FileNotFoundError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞! –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None


async def find_folders(directory_path, list_view, page) -> list:
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    :param directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param list_view: –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    :return list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω üîç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
    """
    folders = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
    for x in os.listdir(directory_path):
        full_path = os.path.join(directory_path, x)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.isdir(full_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–∞–ø–∫–æ–π
            folders.append(x)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–∞–ø–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    await log_and_display(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {folders}", list_view, page)
    return folders  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫


def find_files(directory_path, extension) -> list:
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ –±–µ–∑ —Ç–æ—á–∫–∏.

    :param directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–µ–∑ —Ç–æ—á–∫–∏)
    :return list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    entities = []  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ user_data/accounts
    for x in os.listdir(directory_path):
        if x.endswith(f".{extension}"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            file = os.path.splitext(x)[0]  # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            entities.append([file])  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫

    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {entities}")  # –í—ã–≤–æ–¥–∏–º –∏–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

    return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ json —Ñ–∞–π–ª–æ–≤


def working_with_accounts(account_folder, new_account_folder) -> None:
    """
    –†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏

    :param account_folder: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :param new_account_folder: –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
    """
    try:  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
        os.replace(account_folder, new_account_folder)
    except FileNotFoundError:  # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–∏, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ–µ
        try:
            os.makedirs(new_account_folder)
            os.replace(account_folder, new_account_folder)
        except FileExistsError:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            os.remove(account_folder)
    except PermissionError as error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É")
    except Exception as error:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")


async def record_inviting_results(time_range_1: int, time_range_2: int, username: str) -> None:
    """
    –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ inviting, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    :param time_range_1:  - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
    :param time_range_2:  - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
    :param username: - username –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    logger.info(f'–£–¥–∞–ª—è–µ–º —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö username {username[0]}')
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    await DatabaseHandler().delete_row_db(table="members", column="username", value=username[0])
    # –°–º–µ–Ω–∞ username —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    await record_and_interrupt(time_range_1, time_range_2)


async def record_and_interrupt(time_range_1, time_range_2) -> None:
    """
    –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞.

    :param time_range_1:  - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
    :param time_range_2:  - –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    # –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    selected_shift_time = random.randrange(int(time_range_1), int(time_range_2))
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É username —á–µ—Ä–µ–∑ {selected_shift_time} —Å–µ–∫—É–Ω–¥")
    await asyncio.sleep(selected_shift_time)
