# -*- coding: utf-8 -*-
import time
import webbrowser
from multiprocessing import Process

import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from loguru import logger

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π
from src.core.configs import program_name, program_version, date_of_program_change
from src.core.localization import (parse_selected_user_subscribed_group, parse_single_or_multiple_groups,
                                   parse_active_group_members, clear_previously_parsed_data_list,
                                   parse_account_subscribed_groups_channels, inviting_ru,
                                   invitation_1_time_per_hour_ru, invitation_at_a_certain_time_ru,
                                   inviting_every_day_ru, importing_a_list_of_parsed_data, setting_reactions,
                                   we_are_winding_up_post_views_ru, automatic_setting_of_reactions,
                                   sending_messages_via_chats_ru, sending_personal_messages_with_limits_ru,
                                   recording_api_id_api_hash_ru,
                                   time_between_subscriptions_ru, message_recording_ru, link_entry_ru,
                                   account_limits_ru, message_limits_ru, time_between_subscriptionss_ru,
                                   creating_username_list_ru, recording_the_time_between_messages_ru,
                                   time_between_invites_sending_messages_ru, recording_reaction_link_ru,
                                   forming_list_of_chats_channels_ru, changing_the_username,
                                   changing_the_photo, changing_the_description, name_change_n,
                                   name_change_f, creating_a_contact_list, show_a_list_of_contacts,
                                   deleting_contacts, adding_contacts, working_with_contacts_menu_ru,
                                   subscription, unsubscribe, connecting_accounts_by_phone_number,
                                   connecting_session_accounts)
from src.locales.translations_loader import translations

app = FastAPI()

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
app.mount("/static", StaticFiles(directory="docs/static"), name="static")
templates = Jinja2Templates(directory="docs/templates")  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —à–∞–±–ª–æ–Ω–∞–º–∏.


@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    try:
        return templates.TemplateResponse("index.html", {"request": request, "program_name": program_name})
    except Exception as e:
        logger.exception(f"Error rendering the template: {e}")
        return {"error": "Failed to render template"}


@app.get("/menu", response_class=HTMLResponse)
async def menu(request: Request):
    """–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–æ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    return templates.TemplateResponse("menu.html", {"request": request,
                                                    "program_name": program_name,
                                                    "program_version": program_version,
                                                    "update_date": date_of_program_change})


@app.get("/inviting", response_class=HTMLResponse)
async def inviting_page(request: Request):
    """üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
    return templates.TemplateResponse("inviting.html", {"request": request, "program_name": program_name,
                                                        "inviting_ru": inviting_ru,
                                                        "invitation_1_time_per_hour_ru": invitation_1_time_per_hour_ru,
                                                        "invitation_at_a_certain_time_ru": invitation_at_a_certain_time_ru,
                                                        "inviting_every_day_ru": inviting_every_day_ru})


@app.get("/inviting/inviting_with_limits_in_telegram_master", response_class=HTMLResponse)
async def inviting_with_limits_in_telegram_master(request: Request):
    """üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥")
    return templates.TemplateResponse("inviting/inviting_with_limits_in_telegram_master.html",
                                      {
                                          "request": request, "program_name": program_name,
                                          "inviting_ru": inviting_ru,
                                          "invitation_1_time_per_hour_ru": invitation_1_time_per_hour_ru,
                                          "invitation_at_a_certain_time": invitation_at_a_certain_time_ru,
                                          "inviting_every_day_ru": inviting_every_day_ru,
                                          "start_inviting_button": translations["ru"]["buttons"]["start"],
                                      })


@app.get("/inviting/inviting_1_time_per_hour", response_class=HTMLResponse)
async def inviting_1_time_per_hour(request: Request):
    """‚è∞ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ 1 —Ä–∞–∑ –≤ —á–∞—Å"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥")
    return templates.TemplateResponse("inviting/inviting_1_time_per_hour.html",
                                      {
                                          "request": request, "program_name": program_name,
                                          "inviting_ru": inviting_ru,
                                          "invitation_1_time_per_hour_ru": invitation_1_time_per_hour_ru,
                                          "start_inviting_button": translations["ru"]["buttons"]["start"],
                                      })


@app.get("/inviting/inviting_at_a_certain_time", response_class=HTMLResponse)
async def inviting_at_a_certain_time(request: Request):
    """üïí –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥")
    return templates.TemplateResponse("inviting/inviting_at_a_certain_time.html",
                                      {"request": request, "program_name": program_name,
                                       "inviting": inviting_ru,
                                       "invitation_at_a_certain_time_ru": invitation_at_a_certain_time_ru,
                                       "time_between_subscriptions_ru": time_between_subscriptions_ru,
                                       "start_inviting_button": translations["ru"]["buttons"]["start"],
                                       })


@app.get("/inviting/inviting_every_day", response_class=HTMLResponse)
async def inviting_every_day(request: Request):
    """üìÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥")
    return templates.TemplateResponse("inviting/inviting_every_day.html",
                                      {"request": request, "program_name": program_name,
                                       "inviting_ru": inviting_ru,
                                       "inviting_every_day_ru": inviting_every_day_ru,
                                       "time_between_subscriptions_ru": time_between_subscriptions_ru,
                                       "start_inviting_button": translations["ru"]["buttons"]["start"],
                                       })


# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º, –≤ –ª–∏—á–∫—É
@app.get('/sending_messages', response_class=HTMLResponse)
async def sending_messages(request: Request):
    """üí¨ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info("–ó–∞–ø—É—â–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return templates.TemplateResponse('sending_messages.html', {"request": request, "program_name": program_name,
                                                                    "sending_messages_via_chats_ru": sending_messages_via_chats_ru,
                                                                    "sending_personal_messages_with_limits_ru": sending_personal_messages_with_limits_ru,
                                                                    })
    except Exception as e:
        logger.exception(e)


@app.get('/editing_bio', response_class=HTMLResponse)
async def editing_bio(request: Request):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BIO"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ò–û")
    return templates.TemplateResponse('editing_bio.html', {"request": request, "program_name": program_name,
                                                           "changing_the_username": changing_the_username,
                                                           "changing_the_photo": changing_the_photo,
                                                           "changing_the_description": changing_the_description,
                                                           "name_change_n": name_change_n,
                                                           "name_change_f": name_change_f,
                                                           })


@app.get('/working_with_contacts', response_class=HTMLResponse)
async def working_with_contacts(request: Request):
    """–†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏")
    return templates.TemplateResponse('working_with_contacts.html', {"request": request, "program_name": program_name,
                                                                     "creating_a_contact_list": creating_a_contact_list,
                                                                     "show_a_list_of_contacts": show_a_list_of_contacts,
                                                                     "deleting_contacts": deleting_contacts,
                                                                     "adding_contacts": adding_contacts,
                                                                     "working_with_contacts_menu_ru": working_with_contacts_menu_ru,
                                                                     })


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@app.get('/settings', response_class=HTMLResponse)
async def settings(request: Request):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    return templates.TemplateResponse('settings.html', {"request": request, "program_name": program_name,
                                                        "choice_of_reactions_ru": translations["ru"]["menu_settings"]["choice_of_reactions"],
                                                        "proxy_entry_ru": translations["ru"]["menu_settings"]["changing_accounts_ru"],
                                                        "changing_accounts_ru": translations["ru"]["menu_settings"]["changing_accounts"],
                                                        "recording_api_id_api_hash_ru": recording_api_id_api_hash_ru,
                                                        "time_between_subscriptions_ru": time_between_subscriptions_ru,
                                                        "message_recording_ru": message_recording_ru,
                                                        "link_entry_ru": link_entry_ru,
                                                        "account_limits_ru": account_limits_ru,
                                                        "message_limits_ru": message_limits_ru,
                                                        "time_between_subscriptionss_ru": time_between_subscriptionss_ru,
                                                        "creating_username_list_ru": creating_username_list_ru,
                                                        "recording_the_time_between_messages_ru": recording_the_time_between_messages_ru,
                                                        "time_between_invites_sending_messages_ru": time_between_invites_sending_messages_ru,
                                                        "recording_reaction_link_ru": recording_reaction_link_ru,
                                                        "forming_list_of_chats_channels_ru": forming_list_of_chats_channels_ru,
                                                        })


@app.get('/settings/choice_of_reactions', response_class=HTMLResponse)
async def choice_of_reactions(request: Request):
    """üëç –í—ã–±–æ—Ä —Ä–µ–∞–∫—Ü–∏–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏")
    return templates.TemplateResponse('settings/choice_of_reactions.html', {
        "request": request,
        "program_name": program_name,
        "choice_of_reactions_ru": translations["ru"]["menu_settings"]["choice_of_reactions"],
    })


@app.get('/settings/proxy_entry', response_class=HTMLResponse)
async def proxy_entry(request: Request):
    """üîê –ó–∞–ø–∏—Å—å proxy"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏")
    return templates.TemplateResponse('settings/proxy_entry.html', {
        "request": request,
        "program_name": program_name,
        "proxy_entry_ru": translations["ru"]["menu_settings"]["changing_accounts_ru"],
    })


@app.get('/settings/changing_accounts', response_class=HTMLResponse)
async def changing_accounts(request: Request):
    """üîÑ –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üîÑ –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    return templates.TemplateResponse('settings/changing_accounts.html', {
        "request": request,
        "program_name": program_name,
        "changing_accounts_ru": translations["ru"]["menu_settings"]["changing_accounts"],
    })


@app.get('/settings/recording_api_id_api_hash', response_class=HTMLResponse)
async def recording_api_id_api_hash(request: Request):
    """üìù –ó–∞–ø–∏—Å—å api_id, api_hash"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∏ api_id api_hash")
    return templates.TemplateResponse('settings/recording_api_id_api_hash.html', {
        "request": request,
        "program_name": program_name,
        "recording_api_id_api_hash_ru": recording_api_id_api_hash_ru,
    })


@app.get('/settings/time_between_subscriptions', response_class=HTMLResponse)
async def time_between_subscriptions(request: Request):
    """‚è∞ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚è∞ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏")
    return templates.TemplateResponse('settings/time_between_subscriptions.html', {
        "request": request,
        "program_name": program_name,
        "time_between_subscriptions_ru": time_between_subscriptions_ru,

    })


@app.get('/settings/message_recording', response_class=HTMLResponse)
async def message_recording(request: Request):
    """‚úâÔ∏è –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚úâÔ∏è –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π")
    return templates.TemplateResponse('settings/message_recording.html', {
        "request": request,
        "program_name": program_name,
        "message_recording_ru": message_recording_ru,
    })


@app.get('/settings/link_entry', response_class=HTMLResponse)
async def link_entry(request: Request):
    """üîó –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üîó –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
    return templates.TemplateResponse('settings/link_entry.html', {
        "request": request,
        "program_name": program_name,
        "link_entry_ru": link_entry_ru,
    })


@app.get('/settings/account_limits', response_class=HTMLResponse)
async def account_limits(request: Request):
    """üìä –õ–∏–º–∏—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üìä –õ–∏–º–∏—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç")
    return templates.TemplateResponse('settings/account_limits.html', {
        "request": request,
        "program_name": program_name,
        "account_limits_ru": account_limits_ru,
    })


@app.get('/settings/message_limits', response_class=HTMLResponse)
async def message_limits(request: Request):
    """üì® –õ–∏–º–∏—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üì® –õ–∏–º–∏—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    return templates.TemplateResponse('settings/message_limits.html', {
        "request": request,
        "program_name": program_name,
        "message_limits_ru": message_limits_ru,
    })


@app.get('/settings/time_between_subscriptionss', response_class=HTMLResponse)
async def time_between_subscriptionss(request: Request):
    """‚è≥ –í—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚è≥ –í—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–æ–π")
    return templates.TemplateResponse('settings/time_between_subscriptionss.html', {
        "request": request,
        "program_name": program_name,
        "time_between_subscriptionss_ru": time_between_subscriptionss_ru,
    })


@app.get('/settings/creating_username_list', response_class=HTMLResponse)
async def creating_username_list(request: Request):
    """üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ username"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ username")
    return templates.TemplateResponse('settings/creating_username_list.html', {
        "request": request,
        "program_name": program_name,
        "creating_username_list_ru": creating_username_list_ru,
    })


@app.get('/settings/recording_the_time_between_messages', response_class=HTMLResponse)
async def recording_the_time_between_messages(request: Request):
    """‚è±Ô∏è –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚è±Ô∏è –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
    return templates.TemplateResponse('settings/recording_the_time_between_messages.html', {
        "request": request,
        "program_name": program_name,
        "recording_the_time_between_messages_ru": recording_the_time_between_messages_ru,
    })


@app.get('/settings/time_between_invites_sending_messages', response_class=HTMLResponse)
async def time_between_invites_sending_messages(request: Request):
    """üïí –í—Ä–µ–º—è –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–æ–º, —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üïí –í—Ä–µ–º—è –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–æ–º, —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    return templates.TemplateResponse('settings/time_between_invites_sending_messages.html', {
        "request": request,
        "program_name": program_name,
        "time_between_invites_sending_messages_ru": time_between_invites_sending_messages_ru,
    })


@app.get('/settings/recording_reaction_link', response_class=HTMLResponse)
async def recording_reaction_link(request: Request):
    """üîó –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üîó –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π")
    return templates.TemplateResponse('settings/recording_reaction_link.html', {
        "request": request,
        "program_name": program_name,
        "recording_reaction_link_ru": recording_reaction_link_ru,
    })


@app.get('/settings/forming_list_of_chats_channels', response_class=HTMLResponse)
async def forming_list_of_chats_channels(request: Request):
    """üìë –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ / –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ üìë –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ / –∫–∞–Ω–∞–ª–æ–≤")
    return templates.TemplateResponse('settings/forming_list_of_chats_channels.html', {
        "request": request,
        "program_name": program_name,
        "forming_list_of_chats_channels_ru": forming_list_of_chats_channels_ru,
    })


# –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏

@app.get('/working_with_reactions', response_class=HTMLResponse)
async def working_with_reactions(request: Request):
    """üëç –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏")
    return templates.TemplateResponse('working_with_reactions.html',
                                      {"request": request, "program_name": program_name,
                                       "setting_reactions": setting_reactions,
                                       "we_are_winding_up_post_views_ru": we_are_winding_up_post_views_ru,
                                       "automatic_setting_of_reactions": automatic_setting_of_reactions})


@app.get('/we_are_winding_up_post_views', response_class=HTMLResponse)
async def we_are_winding_up_post_views(request: Request):
    """üëÅÔ∏è‚Äçüó®Ô∏è –ù–∞–∫—Ä—É—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'üëÅÔ∏è‚Äçüó®Ô∏è –ù–∞–∫—Ä—É—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–æ–≤' ")
    return templates.TemplateResponse('we_are_winding_up_post_views.html',
                                      {"request": request, "program_name": program_name,
                                       "setting_reactions": setting_reactions,
                                       "we_are_winding_up_post_views_ru": we_are_winding_up_post_views_ru,
                                       "automatic_setting_of_reactions": automatic_setting_of_reactions,
                                       "forming_list_of_chats_channels_ru": forming_list_of_chats_channels_ru,
                                       })


@app.get('/parsing', response_class=HTMLResponse)
async def parsing(request: Request):
    """üîç –ü–∞—Ä—Å–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    return templates.TemplateResponse('parsing.html', {"request": request, "program_name": program_name,
                                                       "parse_single_or_multiple_groups": parse_single_or_multiple_groups,
                                                       "parse_selected_user_subscribed_group": parse_selected_user_subscribed_group,
                                                       "parse_active_group_members": parse_active_group_members,
                                                       "parse_account_subscribed_groups_channels": parse_account_subscribed_groups_channels,
                                                       "clear_previously_parsed_data_list": clear_previously_parsed_data_list,
                                                       "importing_a_list_of_parsed_data": importing_a_list_of_parsed_data})


@app.get('/subscribe_unsubscribe', response_class=HTMLResponse)
async def subscribe_unsubscribe(request: Request):
    """–ü–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–ø–∏—Å–∫–∞"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø–∏—Å–∫–∏")
    return templates.TemplateResponse('subscribe_unsubscribe.html',
                                      {"request": request, "program_name": program_name, "subscription": subscription,
                                       "unsubscribe": unsubscribe})


@app.get('/connect_accounts', response_class=HTMLResponse)
async def connect_accounts(request: Request):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    return templates.TemplateResponse('connect_accounts.html',
                                      {"request": request, "program_name": program_name,
                                       "connecting_accounts_by_phone_number": connecting_accounts_by_phone_number,
                                       "connecting_session_accounts": connecting_session_accounts})


@app.get('/account_verification', response_class=HTMLResponse)
async def account_verification(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    return templates.TemplateResponse('account_verification.html',
                                      {"request": request, "program_name": program_name})


@app.get('/creating_groups', response_class=HTMLResponse)
async def creating_groups(request: Request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤)"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤)")
    return templates.TemplateResponse('creating_groups.html',
                                      {"request": request, "program_name": program_name})


@app.get('/launch_telegrammaster', response_class=HTMLResponse)
async def launch_telegrammaster(request: Request):
    """–ó–∞–ø—É—Å–∫ TelegramMaster"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ –∑–∞–ø—É—Å–∫–µ TelegramMaster 2.0")
    return templates.TemplateResponse('launch_telegrammaster.html',
                                      {"request": request, "program_name": program_name})


@app.get('/working_with_errors_telegrammaster', response_class=HTMLResponse)
async def working_with_errors_telegrammaster(request: Request):
    """–†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ TelegramMaster 2.0"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ —Ä–∞–±–æ—Ç–µ —Å –æ—à–∏–±–∫–∞–º–∏ TelegramMaster 2.0")
    return templates.TemplateResponse('working_with_errors_telegrammaster.html',
                                      {"request": request, "program_name": program_name})


@app.get('/install_python_update_pip', response_class=HTMLResponse)
async def install_python_update_pip(request: Request):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PIP"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Python, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ PIP")
    return templates.TemplateResponse('install_python_update_pip.html',
                                      {"request": request, "program_name": program_name})


@app.get('/preliminary_setting_of_program_installation_of_program_by_default', response_class=HTMLResponse)
async def preliminary_setting_of_program_installation_of_program_by_default(request: Request):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    logger.info(
        "–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return templates.TemplateResponse(
        'preliminary_setting_of_program_installation_of_program_by_default.html',
        {"request": request, "program_name": program_name})


@app.get('/registration_api_id_api_hash', response_class=HTMLResponse)
async def registration_api_id_api_hash(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ api –∏ hash"""
    logger.info('–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ api –∏ hash')
    return templates.TemplateResponse('registration_api_id_api_hash.html',
                                      {"request": request, "program_name": program_name})


@app.get('/telegram_limits', response_class=HTMLResponse)
async def telegram_limits(request: Request):
    """–õ–∏–º–∏—Ç—ã Telegram"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ –ª–∏–º–∏—Ç–∞—Ö Telegram")
    return templates.TemplateResponse('telegram_limits.html',
                                      {"request": request, "program_name": program_name})


def run_uvicorn():
    """–ó–∞–ø—É—Å–∫ Uvicorn –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI...")
    uvicorn.run("docs.app:app", host="127.0.0.1", port=8000, reload=True)


def start_app():
    try:
        server_process = Process(target=run_uvicorn)
        server_process.start()
        time.sleep(10)
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.

        webbrowser.open("http://127.0.0.1:8000")

        server_process.join()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {error}")
